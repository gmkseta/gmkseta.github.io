{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-4/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","excerpt":"Blocks 블록은 스코프를 제어하기 위한 강력한 도구 블록은 단지 호출 가능한 객체의 큰 구성원 블록을 저장하고 나중에 실행하는 등 이런 객체와 다른 호출 가능한 객체를 최대한 활용하는 방법 설명 예정 The Day of the Blocks Roadmap 블록 기초 범위 개요 및 블록 클로져를 사용한 변수의 범위 이동 블록을 호출 가능한 객체로 변환하여…","html":"<h1>Blocks</h1>\n<ul>\n<li>블록은 스코프를 제어하기 위한 강력한 도구</li>\n<li>블록은 단지 호출 가능한 객체의 큰 구성원</li>\n<li>블록을 저장하고 나중에 실행하는 등 이런 객체와 다른 호출 가능한 객체를 최대한 활용하는 방법 설명 예정</li>\n</ul>\n<h2>The Day of the Blocks</h2>\n<h3>Roadmap</h3>\n<ul>\n<li>블록 기초</li>\n<li>범위 개요 및 블록 클로져를 사용한 변수의 범위 이동</li>\n<li>블록을 호출 가능한 객체로 변환하여 따로 두는 방법, Procs나 람다처럼 나중에 호출</li>\n</ul>\n<h3>The Basics of Blocks</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">a_method</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  a <span class=\"token operator\">+</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\na_method<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">#=> 3</span></code></pre></div>\n<ul>\n<li>중괄호나 <code class=\"language-text\">do..end</code> 로 정의할 수 있다.</li>\n<li>메서드를 호출할 때만 블록을 정의 가능</li>\n<li>블록은 메서드로 바로 전달되며 메소드는 <code class=\"language-text\">yield</code> 키워드로 블록을 다시 호출 가능</li>\n<li>블록은 인수를 가질수도 있다. 예시처럼 인수를 제공 가능</li>\n<li>블록은 메서드처럼 마지막 줄을 반환</li>\n<li><code class=\"language-text\">Kernel#block_given?</code> 으로 블록이 포함되어 있는지 확인 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">a_method</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">if</span> block_given<span class=\"token operator\">?</span>\n  <span class=\"token string\">'no block'</span>\n<span class=\"token keyword\">end</span>\na_method\na_method <span class=\"token punctuation\">{</span> <span class=\"token string\">\"here's a block!\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># => \"no block\"</span>\n<span class=\"token comment\"># => \"here's a block!\"</span></code></pre></div>\n<h2>Blocks Are Closures</h2>\n<ul>\n<li>코드가 실행할 때 지역변수, 인스턴스 변수, 셀프등이 필요..</li>\n<li>코드와 바인딩으로 이뤄져서 뭔가 실행되는 것</li>\n<li>이런 엔티티들은 객체에 바인딩된 것이므로 바인딩이라고 부르겠다?</li>\n<li>블록이 어디서 바인딩을 주워오는지....</li>\n<li>블록을 정의하는 순간 바인딩을 잡은 다음 블록을 메서드로 전달할 때... 함께 바인딩을 전달한다..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n  x <span class=\"token operator\">=</span> <span class=\"token string\">\"Goodbye\"</span>\n  <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cruel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\nmy_method <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>y<span class=\"token operator\">|</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>x<span class=\"token delimiter tag\">}</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>y<span class=\"token delimiter tag\">}</span></span> world\"</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\"># => \"Hello, cruel world\"</span></code></pre></div>\n<ul>\n<li>블록을 생성할 때 x같은 로컬 바인딩을 캡쳐한다.</li>\n<li>블록을 별도의 바인딩 집합이 있는 메서드로 전달한다.</li>\n<li>여전히 블록의 코드는 블록에서 아예 안보이는 메서드의 x가 아닌 블록이 정의되었을 떄 있었던 x를 본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">just_yield</span></span>\n  <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">end</span>\ntop_level_variable <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\njust_yield <span class=\"token keyword\">do</span>\n  top_level_variable <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  local_to_block <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span>\ntop_level_variable  <span class=\"token comment\"># => 2</span>\nlocal_to_block      <span class=\"token comment\"># => Error!</span></code></pre></div>\n<ul>\n<li>블록 내에서 추가 바인딩 정의도 가능하지만 블록 이후에 사라짐</li>\n<li>이런 특성때문에 블록을 클로져라고 하기도 하는듯</li>\n<li>다른 사람들은 블록이 로컬바인딩을 캡쳐하여 옮긴다고 함</li>\n<li>클로져를 실제로 어떻게 쓸까? 이를 이해하려면 바인딩의 위치, 즉 범위를 자세히 쌀펴야한다.</li>\n</ul>\n<h3>Scope</h3>\n<h4>Changing Scope</h4>\n<ul>\n<li><code class=\"language-text\">Kernel#local_variables</code> 를 통해 바인딩의 이름을 추적하여 스코프 보는 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">v1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  v2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  local_variables <span class=\"token comment\"># => [:v2]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n    v3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    local_variables\n  <span class=\"token keyword\">end</span>\n  local_variables <span class=\"token comment\"># => [:v2]</span>\n<span class=\"token keyword\">end</span>\nobj <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nobj<span class=\"token punctuation\">.</span>my_method <span class=\"token comment\"># => [:v3]</span>\nobj<span class=\"token punctuation\">.</span>my_method <span class=\"token comment\"># => [:v3]</span>\nlocal_variables <span class=\"token comment\"># => [:v1, :obj]</span></code></pre></div>\n<ul>\n<li>루비에서는 자바나 C#처럼 내부의 스코프에서 외부의 스코프를 볼수있게 하지 않음, 즉 뚜력하게 구분됨</li>\n<li>새로운 범위를 들어가자마자 새로운 바인딩으로 대체됨</li>\n<li>클래스 내에서 v1이 다시 표시 안되는 것 처럼</li>\n<li>정의 끝날때까지.... 스코프 닫히고 다시 최상위로...</li>\n<li>만약 my_method를 재정의? 당연히 새 바인딩 세트</li>\n</ul>\n<h3>Scope Gates</h3>\n<ul>\n<li>\n<p>이전 스코프를 버리고 새 스코프를 여는 위치</p>\n<ul>\n<li>Class definitions</li>\n<li>Module definitions</li>\n<li>Methods</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">v1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token comment\"># SCOPE GATE: entering class</span>\n  v2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  local_variables <span class=\"token comment\"># => [\"v2\"]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span> <span class=\"token comment\"># SCOPE GATE: entering def</span>\n    v3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    local_variables\n  <span class=\"token keyword\">end</span><span class=\"token comment\"># SCOPE GATE: leaving def</span>\n  local_variables <span class=\"token comment\"># => [\"v2\"]</span>\n<span class=\"token keyword\">end</span> <span class=\"token comment\"># SCOPE GATE: leaving class</span>\nobj <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nobj<span class=\"token punctuation\">.</span>my_method <span class=\"token comment\"># => [:v3]</span>\nlocal_variables <span class=\"token comment\"># => [:v1, :obj]</span></code></pre></div>\n<ul>\n<li>클래스나 모듈은 즉시 코드가 실행 됨</li>\n<li>메서드는 메서드 호출 시 실행됨</li>\n<li>바인딩이 변하는 위치를 알았는데 만약 변수를 하나 넘기고싶다면?</li>\n</ul>\n<h3>Flattening the Scope</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_var <span class=\"token operator\">=</span> <span class=\"token string\">\"Success\"</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n    <span class=\"token comment\"># We want to print my_var here...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n      <span class=\"token comment\"># ..and here</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>my_var을 두 개의 장벽을 거쳐서 어떻게 전달하지..?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> my_var <span class=\"token operator\">=</span> <span class=\"token string\">\"Success\"</span>\n➤ <span class=\"token constant\">MyClass</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">do</span>\n➤ <span class=\"token comment\"># Now we can print my_var here...</span>\n➤ puts <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>my_var<span class=\"token delimiter tag\">}</span></span> in the class definition!\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n      <span class=\"token comment\"># ...but how can we print it here?</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>Class를 Scope Gate가 아닌 메서드 호출로 바꿔서 전달한다면?</li>\n<li>이제 메서드에 전달하려면..?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_var <span class=\"token operator\">=</span> <span class=\"token string\">\"Success\"</span>\n<span class=\"token constant\">MyClass</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">do</span>\n  <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>my_var<span class=\"token delimiter tag\">}</span></span> in the class definition\"</span>\n  <span class=\"token keyword\">define_method</span> <span class=\"token symbol\">:my_method</span> <span class=\"token keyword\">do</span>\n    <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>my_var<span class=\"token delimiter tag\">}</span></span> in the method\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>my_method\n\nrequire_relative <span class=\"token string\">\"../test/assertions\"</span>\nassert_equals <span class=\"token string\">\"Success in the method\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>my_method\n\n<span class=\"token constant\">Success</span> <span class=\"token keyword\">in</span> the <span class=\"token keyword\">class</span> <span class=\"token class-name\">definition</span>\n<span class=\"token constant\">Success</span> <span class=\"token keyword\">in</span> the method</code></pre></div>\n<ul>\n<li>Scope Gate를 메서드호출로 변경하면 한 스코프가 다른 스코프의 변수를 볼 수 있다.</li>\n<li>엄밀히 말하면 이걸 nested lexical scopes라고 부르고, 루비 코더들은 flattening the scope라고 함</li>\n<li>flat scope</li>\n</ul>\n<h4>Sharing the scope</h4>\n<ul>\n<li>저거 알면 이제 스코프로 하고싶은거 다 할 수 있다.</li>\n<li>만약 몇 가지 메서드 간에 변수를 공유, 다른 사람이 해당 변수를 못하도록</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">define_methods</span></span>\n  shared <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:counter</span> <span class=\"token keyword\">do</span>\n    shared\n  <span class=\"token keyword\">end</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:inc</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>x<span class=\"token operator\">|</span>\n    shared <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\ndefine_methods\n\ncounter       <span class=\"token comment\"># => 0</span>\ninc<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ncounter       <span class=\"token comment\"># => 4</span></code></pre></div>\n<ul>\n<li>두개의 커널 메서드를 정의함</li>\n<li><code class=\"language-text\">Kernel#counter</code>, inc는 공유변수를 사용 가능</li>\n<li>하지만 다른 메서드에서는 확인 불가능</li>\n<li>이 공유 스코프는 실제로 많이 사용되지 않지만, 강력한 트릭이자 스코프으 ㅣ힘을 보여주는 에시</li>\n<li>스코프게이트, 플랫 스코프 및 공유 스코프를 함께 쓰면 스코프를 비틀거나 구부려서 원하는 위치에서 필요한 변수를 정확하게 확인 가능</li>\n</ul>\n<h3>Clousure Wrap Up</h3>\n<ul>\n<li>각 스코프에는 여러 바인딩이 포함, 스코프는 스코프 게이트로 구분 된다 - class module def</li>\n<li>만약 Scope Gate를 통해 바인딩된 변수를 전달하려면 블록을 쓸 수 있다.</li>\n<li>블록은 클로져다, 블록을 정의하면 현재 환경에서 바인딩을 캡쳐하여 이동한다.</li>\n<li>따라서 Scope Gate를 메서드 호출로 바꾸고 클로저의 현재 바인딩을 캡쳐하고 클로져를 메서드로 전달 가능</li>\n<li>Class.new, Module,new def를 Module define_method로 변경 가능</li>\n<li>기본적인 클로저 관련 매쥑 플랫 스코프</li>\n<li>스코프 게이트로 보호되는 동일한 플랫 스코프에서 여러 메서드를 정의하는 경우 이런 메서드가 바인딩 공유 가능 - 공유 스코프</li>\n</ul>\n<h2>instance_eval()</h2>\n<ul>\n<li>컨텍스트에서 블록을 eval하는 <code class=\"language-text\">BasicObject#instance_eval</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n    <span class=\"token variable\">@v</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nobj <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nobj<span class=\"token punctuation\">.</span>instance_eval <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">self</span>        <span class=\"token comment\"># => #&lt;MyClass:0x3340dc @v=1></span>\n  <span class=\"token variable\">@v</span>          <span class=\"token comment\"># => 1</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>블록은 리시버를 self로 해서 같이 evaluated 하므로 private method, instance variables에 접근이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">v<span class=\"token operator\">=</span><span class=\"token number\">2</span>\nobj<span class=\"token punctuation\">.</span>instance_eval <span class=\"token punctuation\">{</span> <span class=\"token variable\">@v</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>instance_eval <span class=\"token punctuation\">{</span> <span class=\"token variable\">@v</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\"># => 2</span></code></pre></div>\n<ul>\n<li>instance_eval로 전달된 블록은 다른 블록처럼 해당 위치에서의 바인딩.</li>\n<li>Flat Scope에서 evaluated되므로 .... v도 접근되고 @v도 접근이 가능</li>\n<li>\n<p>instance_eval로 전달되는 블록을 context probe라고 함?!</p>\n<ul>\n<li>코드 조각이 객체 내부에서 동작....하는것...같이...</li>\n</ul>\n</li>\n</ul>\n<h3>Breaking Encapsulation</h3>\n<ul>\n<li>Context Probe를 쓰면 캡슐화에 큰 피해</li>\n<li>실용적으로는 캡슐화가 방해되는 상황이 있다...?</li>\n<li>캡슐화를 깨는 또 다른 납든할 수 있는 이유는 거의 테스트!</li>\n</ul>\n<h4>The Padrino Example</h4>\n<ul>\n<li>Padrino 는 Logger class를 정의함</li>\n<li>Logger는 설정을 인스턴스 변수에 저장함</li>\n<li>Padrino의 테스트는 응용프로그램의 로거 구성을 변경해야한다.</li>\n<li>새 로거를 만들고 구성하는 문제를 겪지 않고 context probe를 사용하여 구성을 변경한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe <span class=\"token string\">\"PadrinoLogger\"</span> <span class=\"token keyword\">do</span>\n  context <span class=\"token string\">'for logger functionality'</span> <span class=\"token keyword\">do</span>\n    context <span class=\"token string\">\"static asset logging\"</span> <span class=\"token keyword\">do</span>\n      should <span class=\"token string\">'not log static assets by default'</span> <span class=\"token keyword\">do</span>\n        <span class=\"token comment\"># ...</span>\n        get <span class=\"token string\">\"/images/something.png\"</span>\n        assert_equal <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> body\n        assert_match <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Padrino</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>string\n      <span class=\"token keyword\">end</span>\n      should <span class=\"token string\">'allow turning on static assets logging'</span> <span class=\"token keyword\">do</span>\n        <span class=\"token constant\">Padrino</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>instance_eval<span class=\"token punctuation\">{</span> <span class=\"token variable\">@log_static</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># ...</span>\n        get <span class=\"token string\">\"/images/something.png\"</span>\n        assert_equal <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> body\n        assert_match <span class=\"token regex\">/GET/</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Padrino</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>string\n        <span class=\"token constant\">Padrino</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>instance_eval<span class=\"token punctuation\">{</span> <span class=\"token variable\">@log_static</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li>첫 테스트는 아무것도 기록하지 않는 것을 확인</li>\n<li>두 번째 테스트에서는 instance_eval로 로거의 구성을 변경하고 정적 파일 로깅을 활성화</li>\n<li>기록을 확인하고, 다시 비활성화</li>\n<li>루비의 다른 많은 것들과 마찬가지로 캡슐화는 무시할 수 있는 유연한 도구이며 이러한 위험을 받아들일지... 는 우리에게 달려있다.</li>\n</ul>\n<h3>Clean Rooms</h3>\n<ul>\n<li>단지 객체를 생성한다 블록 안을 evaluate하기위해?</li>\n<li>이 객체는 Clean Room이라고 불린다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CleanRoom</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">current_temperature</span></span>\n   <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nclean_room <span class=\"token operator\">=</span> <span class=\"token constant\">CleanRoom</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nclean_room<span class=\"token punctuation\">.</span>instance_eval <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">if</span> current_temperature <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span>\n    <span class=\"token comment\"># TODO: wear jacket</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>클린 룸은 클록을 eval 할 수 있는 환경일 뿐</li>\n<li>이상적인 클린룸은 메서드 및 인스턴스 변수가 많지 않음 - 블록과 충돌때문에..?</li>\n<li>\n<p>BasicObject의 인스턴스는 Blank Slates이므로 좋은 클린룸을 제공한다.</p>\n<ul>\n<li>너무 깨끗해서 String같은 표준 루비 상수도 없음. 절대경로 써야함 ::String 처럼</li>\n</ul>\n</li>\n</ul>\n<h2>Callable Objects</h2>\n<ul>\n<li>\n<p>블록 사용은 두 단계의 과정</p>\n<ul>\n<li>일부 코드를 따로 두고</li>\n<li>블록을 호출하여 실행</li>\n</ul>\n</li>\n<li>\"코드 패키지 우선, 나중에 호출\"은 블록에만 국한된 게 아니다</li>\n<li>proc 블록은 객체로 변경된 블록</li>\n<li>lambda proc을 약간 변형한 것</li>\n<li>methods</li>\n</ul>\n<h3>Proc Objects</h3>\n<ul>\n<li>루비의 대부분은 객체지만 블록은 아니다?</li>\n<li>뭔 상관? -> 블록을 저장하고 나중에 쓰려한다. 그러려면 객체가 필요함</li>\n<li>이 문제를 해결하기위해 Proc, 객체로 변환된 블록임</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">inc <span class=\"token operator\">=</span> <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token operator\">|</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># more code...</span>\ninc<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 3</span></code></pre></div>\n<ul>\n<li>Deferred Evaluation이라 함</li>\n<li>몇 가지 방법이 더 있음</li>\n<li>lambda 로 만드는 것은 조금 차이가 있지만 대부분 원하는 것을 얻을 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">dec <span class=\"token operator\">=</span> lambda <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token operator\">|</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\ndec<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\"># => Proc</span>\ndec<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 1</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">#=> called stabby lambda operator</span></code></pre></div>\n<h3>The &#x26; Operator</h3>\n<ul>\n<li>\n<p>메서드로 블록을 넘겨서 사용하는 경우 대부분 yield로 충분하지만, 아닌 경우도 있음</p>\n<ul>\n<li>블록을 다른 메서드에게 넘기고 싶다거나</li>\n<li>블록을 Rroc로 변환하고싶다거나</li>\n</ul>\n</li>\n<li>둘다 모두 블록을 사용하겠다고 말 해줘야함, - 블록을 바인딩하기 위해서는 \"&#x26;\" 가 필요함</li>\n<li>인수 목록의 마지막이여야 하고 &#x26;기호를 사용해야함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">math</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">do_math</span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>operation<span class=\"token punctuation\">)</span>\n  math<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>operation<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\ndo_math<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">|</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">}</span> <span class=\"token comment\">#=>6</span></code></pre></div>\n<ul>\n<li>&#x26; 의 뜻은 \"나는 이 메서드로 전달되는 블록을 Proc으로 바꾸고 싶다\" 라는 뜻이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>the_proc<span class=\"token punctuation\">)</span>\n  the_proc\n<span class=\"token keyword\">end</span>\np <span class=\"token operator\">=</span> my_method <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>name<span class=\"token operator\">|</span> <span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>!\"</span> <span class=\"token punctuation\">}</span>\np<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>         <span class=\"token comment\"># => Proc</span>\np<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># => \"Hello, Bill!\"</span></code></pre></div>\n<ul>\n<li>바로 리턴해보면 Proc임</li>\n<li>다시 Proc을 블록으로 변경하고 싶다면? &#x26;를 또 쓰면 댐?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span>\n  <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>greeting<span class=\"token delimiter tag\">}</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token keyword\">yield</span><span class=\"token delimiter tag\">}</span></span>!\"</span>\n<span class=\"token keyword\">end</span>\nmy_proc <span class=\"token operator\">=</span> proc <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Bill\"</span> <span class=\"token punctuation\">}</span>\nmy_method<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>my_proc<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>&#x26;는 my_proc을 블록으로 변환하고 그 블록을 메서드로 전달한다.</li>\n</ul>\n<h3>The Higline example</h3>\n<ul>\n<li>콘솔 입력 및 출력을 자동화 하는 잼</li>\n<li>쉼표로 구분된 사용자 입력을 수집하여 배열로 분할 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'highline'</span>\nhl <span class=\"token operator\">=</span> <span class=\"token constant\">HighLine</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nfriends <span class=\"token operator\">=</span> hl<span class=\"token punctuation\">.</span>ask<span class=\"token punctuation\">(</span><span class=\"token string\">\"Friends?\"</span><span class=\"token punctuation\">,</span> lambda <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>s<span class=\"token operator\">|</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nputs <span class=\"token string\">\"You're friends with: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>friends<span class=\"token punctuation\">.</span>inspect<span class=\"token delimiter tag\">}</span></span>\"</span>\n❮ <span class=\"token constant\">Friends?</span>\n➾ <span class=\"token constant\">Ivana</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Roberto</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Olaf</span>\n❮ <span class=\"token constant\">You</span>'re friends with<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ivana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" Roberto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" Olaf\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">HighLine#ask</code> 는 post processing 코드를 Proc으로 받아서 쓴다.</li>\n<li>왜 블록이 아닌 Proc이냐? - 다른 HighLine 메커니즘을 위해 예약되어있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> name <span class=\"token operator\">=</span> hl<span class=\"token punctuation\">.</span>ask<span class=\"token punctuation\">(</span><span class=\"token string\">\"Name?\"</span><span class=\"token punctuation\">,</span> lambda <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>s<span class=\"token operator\">|</span> s<span class=\"token punctuation\">.</span>capitalize <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   puts <span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>\"</span>\n❮ <span class=\"token constant\">Name?</span>\n➾ bill\n❮ <span class=\"token constant\">Hello</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Bill</span></code></pre></div>\n<h3>Procs vs Lambdas</h3>\n<ul>\n<li>미묘하게 다른데 많이 혼란스러울 것 이다.</li>\n<li>\n<p>대략적인 중요한 차이점 두가지</p>\n<ul>\n<li>반환 키워드와 관련</li>\n<li>인수 확인과 관련</li>\n</ul>\n</li>\n</ul>\n<h4>Procs, Lambdas and return</h4>\n<ul>\n<li>리턴 키워드가 다른 것을 의미한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">double</span></span><span class=\"token punctuation\">(</span>callable_object<span class=\"token punctuation\">)</span>\n  callable_object<span class=\"token punctuation\">.</span>call <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">end</span>\nl <span class=\"token operator\">=</span> lambda <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\ndouble<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 20</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">another_double</span></span>\n  p <span class=\"token operator\">=</span> <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\n  result <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>call\n  puts result\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># unreachable code!</span>\n<span class=\"token keyword\">end</span>\nanother_double <span class=\"token comment\"># => 10</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">p <span class=\"token operator\">=</span> <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\ndouble<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># => LocalJumpError</span>\np <span class=\"token operator\">=</span> <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\ndouble<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># => 20</span></code></pre></div>\n<ul>\n<li>proc.call 하는 순간 그 리턴코드가 리턴 되어버리네...</li>\n<li>블록이 언랩되는 느낌인가?</li>\n</ul>\n<h4>Procs, Lambdas, and Arity</h4>\n<ul>\n<li>두 번째 차이점은 argument를 확인하는 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">p <span class=\"token operator\">=</span> <span class=\"token builtin\">Proc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\np<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># => [1, 2]</span>\np<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># => [1, nil]</span>\nl <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\nl<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => ArgumentError: wrong number of arguments (given 3, expected 2)</span>\nl<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => ArgumentError: wrong number of arguments (given 1, expected 2)</span></code></pre></div>\n<ul>\n<li>람다는 에러, Proc은 초과인수 버림</li>\n<li>일반적으로 람다를 많이</li>\n</ul>\n<h3>Method Objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@x</span> <span class=\"token operator\">=</span> value\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n    <span class=\"token variable\">@x</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nobject <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nm <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>method <span class=\"token symbol\">:my_method</span>\nm<span class=\"token punctuation\">.</span>call</code></pre></div>\n<ul>\n<li><code class=\"language-text\">Kernel#method</code> 로 메서드 자체를 메서드 객체로 얻을 수 있다.</li>\n<li>호출도 가능함.</li>\n<li>ruby 2.1부터는 <code class=\"language-text\">Kernel#singleton_method</code> 라는 것도 있다는데..</li>\n<li>Proc이랑 Lambda랑 유사 하지만... 중요한 차이</li>\n<li>Lambda는 정의된 범위에서 eval</li>\n<li>메서드는 객체의 범위 에서 eval</li>\n</ul>\n<h4>Unbound Methods</h4>\n<ul>\n<li>클래스 또는 모듈에서 분리된 메서드</li>\n<li><code class=\"language-text\">Metdhod#unbind</code>를 통해서 메서드를 Unbound 메서드로 만들 수 있음</li>\n<li>instance_method로도 만들 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">MyModule</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n    <span class=\"token number\">42</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nunbound <span class=\"token operator\">=</span> <span class=\"token constant\">MyModule</span><span class=\"token punctuation\">.</span>instance_method<span class=\"token punctuation\">(</span><span class=\"token symbol\">:my_method</span><span class=\"token punctuation\">)</span>\nunbound<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>              <span class=\"token comment\"># => UnboundMethod</span></code></pre></div>\n<ul>\n<li>unbound method를 호출할 순 없지만 호출할 수 있는 일반 메서드르 생성하는 데 사용 가능하다.</li>\n<li>bind를 사용하여 객체에 바인딩 하면 된다.</li>\n<li>기존에는 클래스에서 가져온 동일한 클래스의 객체에만 바인딩 가능했지만 2.0부터는 다됨.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span>class_eval <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">define_method</span> <span class=\"token symbol\">:another_method</span><span class=\"token punctuation\">,</span> unbound\n<span class=\"token keyword\">end</span>\n<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span>another_method <span class=\"token comment\"># => 42</span></code></pre></div>\n<ul>\n<li>매우 특이한 케이스에만 사용됨</li>\n</ul>\n<h5>The Active Support Example</h5>\n<ul>\n<li>Active Support는 여러 유틸 중에서 해당 파일에 정의된 상수를 사용할 떄 자동으로 Ruby 파일을 로드하는 클래스 및 모듈 세트가 포함되어 있다.</li>\n<li>이 \"Autoloading\" 시스템은 <code class=\"language-text\">Kernel#load</code> 함수를 재정의 하는 Loadable이라는 모듈을 포함한다.</li>\n<li>클래스에 Loadable이 포함된 경우 Loadable#load는 상위 체인의 Kernel#load보다 낮아진다.</li>\n<li>따라서 Loadable#load가 호출 됨</li>\n<li>경우에 따라 Loadable#load를 제거하고 바닐라 Kernel#load를 사용하기도 하는데</li>\n<li>루비에는 언 인클루드가 없으므로 조상을 제거할 수 없다. 이럴떄..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Loadable</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">exclude_from</span></span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n    base<span class=\"token punctuation\">.</span>class_eval <span class=\"token punctuation\">{</span> <span class=\"token keyword\">define_method</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:load</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>instance_method<span class=\"token punctuation\">(</span><span class=\"token symbol\">:load</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\">#...</span></code></pre></div>\n<ul>\n<li>unboundmethod의 좋은 예고, 구체적인 문제에 대한 솔루션이기도 함</li>\n<li>즉 두 개의 로드 메서드가 동일하고 혼란스럽게 만드는 솔루션..</li>\n</ul>\n<h2>Callable Objects Wrap-Up</h2>\n<ul>\n<li>evaluate 가능한 코드 조각, 고유한 스코프를 가짐</li>\n<li>Blocks - (objects는 아니지만 callable함 ) - 정의된 스코프 내에서 evaluated</li>\n<li>Procs - Proc 클래스 객체임 블록과 마찬가지로 정의된 범위 내에서 eval</li>\n<li>Lambdas - 똑같이 Procs의 객체지만 약간 다름, 똑같이 클로저고 정의되는 범위 안에서 eval</li>\n<li>Method - 객체에 바인딩 된 메서드는 해당 객체의 범위 안에서 eval, 리바인드 가능,</li>\n</ul>\n<p>각 오브젝트 마다 미묘하게 다른 동작이 나타난다.</p>\n<p>메서드와 람다는 callable object로부터 반환하는 반면 Procs와 Block은 호출 가능한 객체의 원래 컨턱스트에서 반환을 한다.</p>\n<p>또한 다른 아리티를 가진 호출에 대해 다르게 반응한다.</p>\n<p>메서드가 더 엄격, 람다가 그만큼 엄격, 프록과 블록이 덜 엄격</p>\n<p>그럼에도 &#x26; 로 각 객체들이 변환 가능</p>\n<h2>Writing a Domain-Specific Language</h2>\n<ul>\n<li>RedFlag라는 영엄부 직원을 위한 모니터링 유틸리티</li>\n<li>주문이 늦을 때 총 매출이 너무 낮을 때 기본적으로 여러 가지 일이 발생할 때마다 메시지</li>\n<li>DSL정도만 작성하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">event <span class=\"token string\">\"we're earning wads of money\"</span> <span class=\"token keyword\">do</span>\n    recent_orders <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token comment\"># (read from database)</span>\n    recent_orders <span class=\"token operator\">></span> <span class=\"token number\">1000</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>true 반환 시 메일, false는 패스</li>\n<li>시스템은 몇 분마다 모든 이벤트를 확인</li>\n</ul>\n<h3>Your First DSL</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">event</span></span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"ALERT: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>description<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">end</span>\nload <span class=\"token string\">'events.rb'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">event <span class=\"token string\">\"an event that always happens\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">end</span>\nevent <span class=\"token string\">\"an event that never happens\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Sharing Among Events</h3>\n<ul>\n<li>이벤트를 작성하는 사람들은 이벤트 간에 데이터를 공유하고 싶어할 것이다...</li>\n<li>DSL로 될까?두 개의 개별 이벤트가 동일한 변수에 액세스할 수 있나?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">monthly_sales</span></span>\n  <span class=\"token number\">110</span>   <span class=\"token comment\"># TODO: read the real number from the database</span>\n<span class=\"token keyword\">end</span>\ntarget_sales <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nevent <span class=\"token string\">\"monthly sales are suspiciously high\"</span> <span class=\"token keyword\">do</span>\n    monthly_sales <span class=\"token operator\">></span> target_sales\n<span class=\"token keyword\">end</span>\n  event <span class=\"token string\">\"monthly sales are abysmally low\"</span> <span class=\"token keyword\">do</span>\n    monthly_sales <span class=\"token operator\">&lt;</span> target_sales\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>flat scope가 있지~</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">❮ <span class=\"token constant\">ALERT</span><span class=\"token punctuation\">:</span> monthly sales are suspiciously high</code></pre></div>\n<ul>\n<li>하지만 변수들이 최상위 범위를 혼란스럽게 함.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">setup <span class=\"token keyword\">do</span>\n    puts <span class=\"token string\">\"Setting up sky\"</span>\n    <span class=\"token variable\">@sky_height</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">end</span>\nsetup <span class=\"token keyword\">do</span>\n    puts <span class=\"token string\">\"Setting up mountains\"</span>\n    <span class=\"token variable\">@mountains_height</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">end</span>\nevent <span class=\"token string\">\"the sky is falling\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@sky_height</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span>\n<span class=\"token keyword\">end</span>\nevent <span class=\"token string\">\"it's getting closer\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@sky_height</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">@mountains_height</span>\n<span class=\"token keyword\">end</span>\nevent <span class=\"token string\">\"whoops... too late\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@sky_height</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Setting up sky</span>\n<span class=\"token comment\">#Setting up mountains</span>\n<span class=\"token comment\">#ALERT: the sky is falling</span>\n<span class=\"token comment\">#Setting up sky</span>\n<span class=\"token comment\">#Setting up mountains</span>\n<span class=\"token comment\">#ALERT: it's getting closer</span>\n<span class=\"token comment\">#Setting up sky</span>\n<span class=\"token comment\">#Setting up mountains</span></code></pre></div>\n<ul>\n<li>세 이벤트 각각 이전의 모든 설정을 실행한다.</li>\n<li>@변수로 , 이벤트가 변수를 읽을 수 있음</li>\n<li>모든 공유변수는 설정에서 초기화되고 이벤트에서 사용되므로 변수를 쉽게 추적 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">event</span></span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n  <span class=\"token variable\">@events</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:description</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> description<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:condition</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> block<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token variable\">@events</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nload <span class=\"token string\">'events.rb'</span></code></pre></div>\n<ul>\n<li>새 이벤트 메서드는 이벤트 조건을 블록해서 Proc으로 변환,</li>\n<li>이벤트의 설명과 proc을 해시에 래핑하고 이벤트 배열에 저장</li>\n<li>배열은 글로벌 변수 및 최상위 인스턴스 변수이므로 이벤트 메서드 외부에서 초기화할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n  <span class=\"token variable\">@setups</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> block\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">event</span></span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n  <span class=\"token variable\">@events</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:description</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> description<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:condition</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> block<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token variable\">@setups</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token variable\">@events</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nload <span class=\"token string\">'events.rb'</span>\n<span class=\"token variable\">@events</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>event<span class=\"token operator\">|</span>\n  <span class=\"token variable\">@setups</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>setup<span class=\"token operator\">|</span>\n    setup<span class=\"token punctuation\">.</span>call\n  <span class=\"token keyword\">end</span>\n  puts <span class=\"token string\">\"ALERT: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:description</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:condition</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>call\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>하지만 setups과 events는 글로벌 변수같다..</li>\n</ul>\n<h3>Removing the \"Global\" Varaibles</h3>\n<ul>\n<li>Shared scope?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">lambda <span class=\"token punctuation\">{</span>\n  setups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  events <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:setup</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">&amp;</span>block<span class=\"token operator\">|</span>\n    setups <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> block\n<span class=\"token keyword\">end</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:event</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>description<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token operator\">|</span>\n    events <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:description</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> description<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:condition</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> block<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:each_setup</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">&amp;</span>block<span class=\"token operator\">|</span>\n    setups<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>setup<span class=\"token operator\">|</span>\n      block<span class=\"token punctuation\">.</span>call setup\n<span class=\"token keyword\">end</span> <span class=\"token keyword\">end</span>\n  <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:each_event</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">&amp;</span>block<span class=\"token operator\">|</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>event<span class=\"token operator\">|</span>\n      block<span class=\"token punctuation\">.</span>call event\n<span class=\"token keyword\">end</span> <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>call\n\nload <span class=\"token string\">'events.rb'</span>\neach_event <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>event<span class=\"token operator\">|</span>\n  each_setup <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>setup<span class=\"token operator\">|</span>\nsetup<span class=\"token punctuation\">.</span>call\n<span class=\"token keyword\">end</span>\n  puts <span class=\"token string\">\"ALERT: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:description</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:condition</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>call\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>추악한 글로벌 변수들은 사라졌지만...</li>\n<li>예전처럼 간단하진 않다</li>\n</ul>\n<h3>Adding a Clean Room</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">event <span class=\"token string\">\"define a shared variable\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token variable\">@x</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span>\nevent <span class=\"token string\">\"change the variable\"</span> <span class=\"token keyword\">do</span>\n  <span class=\"token variable\">@x</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@x</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>이벤트가 설정을 통해 변수를 공유하기를 원하지만 이벤트가 서로의 변수를 공유할 필요는 없다.</li>\n<li>기능인지 버그인지는 우리에게 달려있다.</li>\n<li>이벤트가 가능한 독립적으로 동작해야한다면 클린룸에서 실행 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">each_event <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>event<span class=\"token operator\">|</span>\n  env <span class=\"token operator\">=</span> <span class=\"token builtin\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  each_setup <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>setup<span class=\"token operator\">|</span>\n    env<span class=\"token punctuation\">.</span>instance_eval <span class=\"token operator\">&amp;</span>setup\n  <span class=\"token keyword\">end</span>\n  puts <span class=\"token string\">\"ALERT: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:description</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> env<span class=\"token punctuation\">.</span>instance_eval <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span><span class=\"token symbol\">:condition</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>이제 해당 설정은 클린룸 역할을 하는 오브젝트의 컨텍스트에서 eval된다</li>\n<li>설정 및 이벤트의 인스턴스 변수는 최상위 인스턴스 변수가 아니라 클린룸의 인스턴스 변수</li>\n<li>최상위 인스턴스 변수가 아닌 클린룸의 인스턴스 변수이므로 .. 이벤트는 인스턴스 변수를 공유 못함</li>\n<li>BasicObject를 사용할 수도 있지만 일반적인 메서드가 없음.</li>\n</ul>\n<h2>Wrap Up</h2>\n<ul>\n<li>Scope Gate가 무엇인지</li>\n<li>플랫 스코프와 공유 스코프를 사용하여 범위를 통해 바인딩을 표시하는 방법</li>\n<li>객체의 범위 - instance<em>eval, instance</em>exec 또는 클린룸에서 코드를 실행하는 방법</li>\n<li>블록을 객체(Proc)로 반환하고 돌리는 방법</li>\n<li>메소드를 객체로 (Method, UnboundMethod)로 변환하는 방법 및 되돌리기</li>\n<li>Callable Object 유형간의 차이</li>\n<li>-</li>\n</ul>","frontmatter":{"title":"M Ruby - 4. Blocks","date":"April 22, 2021","update":"April 22, 2021","tags":["ruby","book"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-4/","readingTime":{"minutes":14.085}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}},"next":{"fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},"pageContext":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","series":"Metaprogramming Ruby","previousPostId":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","nextPostId":"10646ae4-ced4-5411-87f6-7011a8f5c108"}},"staticQueryHashes":[]}