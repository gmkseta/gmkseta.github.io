{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-3/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","excerpt":"Methods 자바나 C처럼 강타입 언어는 컴파일러가 모든 메서드 호출에 대해 수신 객체가 일치하는 메서드를 갖고있는지 확인한다. 정적 유형 검사라고 하며 정적 타입 언어가 이를 채택해서 사용함 파이썬이나 루비같은 동적 언어들은 컴파일러가 확인하지 않음 루비에서는 boilerplate method가 문제가 안되는데 이에 대해 알아보자~ 중복 문제 99$를…","html":"<h1>Methods</h1>\n<ul>\n<li>\n<p>자바나 C처럼 강타입 언어는 컴파일러가 모든 메서드 호출에 대해 수신 객체가 일치하는 메서드를 갖고있는지 확인한다.</p>\n<ul>\n<li>정적 유형 검사라고 하며 정적 타입 언어가 이를 채택해서 사용함</li>\n</ul>\n</li>\n<li>파이썬이나 루비같은 동적 언어들은 컴파일러가 확인하지 않음</li>\n<li>루비에서는 boilerplate method가 문제가 안되는데 이에 대해 알아보자~</li>\n</ul>\n<h2>중복 문제</h2>\n<ul>\n<li>99$를 이상을 쓰는 컴퓨터 장비를 찾기</li>\n</ul>\n<h3>레거시 시스템</h3>\n<ul>\n<li>DS(Data Source)라는 이름의 클래스 뒤에 레거시 시스템에 데이터들이 저장되어있다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DS</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span> <span class=\"token comment\"># connect to data source...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_cpu_info</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_cpu_price</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_mouse_info</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_mouse_price</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_keyboard_info</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_keyboard_price</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_display_info</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_display_price</span></span><span class=\"token punctuation\">(</span>workstation_id<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n  <span class=\"token comment\"># ...and so on</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">DS#initialize</code> 새 DS object를 만들 때 디비와 연결 된다.</li>\n<li>다른 메서드들(수십 개의)은 워크스테이션 id를 갖고 컴퓨터 부품에 대한 설명과 가격을 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">ds <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nds<span class=\"token punctuation\">.</span>get_cpu_info<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => \"2.9 Ghz quad-core\"</span>\nds<span class=\"token punctuation\">.</span>get_cpu_price<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 120</span>\nds<span class=\"token punctuation\">.</span>get_mouse_info<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => \"Wireless Touch\"</span>\nds<span class=\"token punctuation\">.</span>get_mouse_price<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># => 60</span></code></pre></div>\n<h3>Double, Treble,... Trouble</h3>\n<ul>\n<li>각 어플리케이션에 맞는 객체로 DB를 래핑해야한다.</li>\n<li>즉, 각 컴퓨터가 객체여야 한다.</li>\n<li>이 객체는 각 구성요소에 대해 단일 메서드를 갖고있고 해당 구성 요소의 가격을 모두 설명하는 문자열을 반환한다.</li>\n<li>100$이상이면 주의를 끌기위해 별을 붙인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\">#methods/computer/duplicated.rb</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n    <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">mouse</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_mouse_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_mouse_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Mouse: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">cpu</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_cpu_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_cpu_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Cpu: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">keyboard</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_keyboard_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_keyboard_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Keyboard: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>중복이 많다.</li>\n<li>메서드가 많다</li>\n<li>각 메서드에 대한 테스트를 작성해야한다.</li>\n</ul>\n<h2>동적 메서드</h2>\n<p>동적으로 메서드를 호출하고 정의하는 방법과 중복 코드를 제거하는 방법</p>\n<h3>함수 동적으로 호출하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span><span class=\"token punctuation\">(</span>my_arg<span class=\"token punctuation\">)</span>\n    my_arg <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nobj <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nobj<span class=\"token punctuation\">.</span>my_method<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># => 6</span></code></pre></div>\n<ul>\n<li>다른 방법으로 <code class=\"language-text\">MyClass#my_method</code> 대신 <code class=\"language-text\">Object#send</code> 을 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">obj<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token symbol\">:my_method</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>똑같이 my_method를 호출하지만 send를 사용해서 호출된다.</li>\n<li>send를 사용하면 호출할 메서드를 결정하기 위해 마지막까지 기다릴 수 있다.</li>\n<li>이를 동적 디스패치라고 한다.</li>\n</ul>\n<h4>Pry 예시</h4>\n<ul>\n<li>Pry는 irb의 좋은 대안 ( command line interpreter )</li>\n<li>Pry 객체는 인터프리터의 설정을 갖고있음 - memory_size나 quite같은</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">\"pry\"</span>\npry <span class=\"token operator\">=</span> <span class=\"token constant\">Pry</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\npry<span class=\"token punctuation\">.</span>memory_size <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\npry<span class=\"token punctuation\">.</span>memory_size\npry<span class=\"token punctuation\">.</span>quiet <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token comment\"># => 101</span>\n\n<span class=\"token constant\">Pry</span><span class=\"token punctuation\">.</span>memory_size <span class=\"token comment\"># 각 속성의 기본값을 반환하는 메서드도 있다.</span></code></pre></div>\n<ul>\n<li>Pry 인스턴스를 설정하려면 <code class=\"language-text\">Pry#refresh</code> 라는 메서드를 호출하면 된다.</li>\n<li>속성 이름을 새 값에 매핑하는 해시를 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">pry<span class=\"token punctuation\">.</span>refresh<span class=\"token punctuation\">(</span><span class=\"token symbol\">:memory_size</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:quiet</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\npry<span class=\"token punctuation\">.</span>memory_size       <span class=\"token comment\"># => 99</span>\npry<span class=\"token punctuation\">.</span>quiet             <span class=\"token comment\"># => false</span></code></pre></div>\n<ul>\n<li>\n<p>refresh는 할 일이 많음</p>\n<ul>\n<li>각 속성을 (self.memory_size 등) 검토하고 기본값으로 초기화해야하며</li>\n<li>해시 인수에 동일한 특성에 대한 새 값이 있나 확인 후 있으면 설정</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">refresh</span></span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  defaults<span class=\"token punctuation\">[</span><span class=\"token symbol\">:memory_size</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Pry</span><span class=\"token punctuation\">.</span>memory_size\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>memory_size <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:memory_size</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:memory_size</span><span class=\"token punctuation\">]</span>\n  defaults<span class=\"token punctuation\">[</span><span class=\"token symbol\">:quiet</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Pry</span><span class=\"token punctuation\">.</span>quiet\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>quiet <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:quiet</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">[</span><span class=\"token symbol\">:quiet</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># same for all the other attributes...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>이 두 줄은 각 속성마다 반복되어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">refresh</span></span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  defaults   <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token symbol\">:input</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:output</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:commands</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:print</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:quiet</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token symbol\">:exception_handler</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:hooks</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:custom_completions</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token symbol\">:prompt</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:memory_size</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:extra_sticky_locals</span> <span class=\"token punctuation\">]</span>\n  attributes<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>attribute<span class=\"token operator\">|</span>\n    defaults<span class=\"token punctuation\">[</span>attribute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Pry</span><span class=\"token punctuation\">.</span>send attribute\n  <span class=\"token keyword\">end</span>\n  <span class=\"token comment\"># ...</span>\n  defaults<span class=\"token punctuation\">.</span>merge<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>key<span class=\"token punctuation\">,</span> value<span class=\"token operator\">|</span>\n    send<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>key<span class=\"token delimiter tag\">}</span></span>=\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> respond_to<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>key<span class=\"token delimiter tag\">}</span></span>=\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>send로 기본 값을 읽는다.</li>\n<li>옵션 해시와 merge한다</li>\n<li>memory_size=value 꼴로 call attribute accessor을 사용</li>\n<li>respond<em>to? 는 Pry#memory</em>size= 이 있으면 true를 반환</li>\n</ul>\n<h4>Privacy Matters</h4>\n<ul>\n<li><code class=\"language-text\">Object#send</code> 는 private method를 포함하여 모든 메서드를 쓸수 있다.</li>\n<li>이러한 종류의 캡슐화 위반.... 불편하면 <code class=\"language-text\">public_send</code> 를 사용한다.</li>\n<li>하지만 야생의 루비코드는 이러한 우려를 거의 신경쓰지않음....</li>\n<li>오히려 많은 루비 프로그래머들이 send를 private method쓰려고 씀...</li>\n<li>동적 호출 봤고 동적 정의 보자~</li>\n</ul>\n<h3>메서드를 동적으로 정의하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  <span class=\"token keyword\">define_method</span> <span class=\"token symbol\">:my_method</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>my_arg<span class=\"token operator\">|</span>\n    my_arg <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nobj <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nobj<span class=\"token punctuation\">.</span>my_method<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># => 6</span>\n\nrequire_relative <span class=\"token string\">'../test/assertions'</span>\nassert_equals <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>my_method<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Module#define_method</code> 를 사용, method name 하고 block만 넘기면 된다.</li>\n<li><code class=\"language-text\">Myclass</code> 내에서 실행 되므로 MyClass의 인스턴스 메서드로 정의됨</li>\n<li>동적 메서드라고 한다</li>\n<li>define_method 키워드를 쓰면 런타임에 정의된 메서드의 이름을 결정 가능</li>\n</ul>\n<h4>Computer 클래스 리팩터링</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n    <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">mouse</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_mouse_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_mouse_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Mouse: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">cpu</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_cpu_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_cpu_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Cpu: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">keyboard</span></span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_keyboard_info<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>get_keyboard_price<span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Keyboard: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p><strong>Step 1: 다이나믹 디스패치 추가</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n      <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">mouse</span></span>\n      component <span class=\"token symbol\">:mouse</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">cpu</span></span>\n      component <span class=\"token symbol\">:cpu</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">keyboard</span></span>\n      component <span class=\"token symbol\">:keyboard</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">component</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send <span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span>\n      price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send <span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_price\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span>\n      result <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token punctuation\">.</span>capitalize<span class=\"token delimiter tag\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n      result\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>각 메서드를 component 메서드에 위임한다.</li>\n<li>하지만 아직도 중복이 많다.</li>\n</ul>\n<p><strong>Step 2: 동적 메서드 정의</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n    <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">define_component</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">define_method</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send <span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span>\n      price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send <span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_price\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span>\n      result <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token punctuation\">.</span>capitalize<span class=\"token delimiter tag\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n      result\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  define_component <span class=\"token symbol\">:mouse</span>\n  define_component <span class=\"token symbol\">:cpu</span>\n  define_component <span class=\"token symbol\">:keyboard</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>여기서 self는 Computer임</li>\n<li><code class=\"language-text\">define_component</code>는 클래스 메서드</li>\n</ul>\n<p><strong>Step 3: 인트로스펙션으로 뿌리기</strong></p>\n<ul>\n<li>최소한의 중복만 있지만 완전히 제거가 가능하다.</li>\n<li><code class=\"language-text\">define_component</code> 에 대한 호출을 다 지운다.</li>\n<li>인트로스펙션으로 모든 컴포넌트의 이름을 추출한다..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n    <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n    data_source<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span>grep<span class=\"token punctuation\">(</span><span class=\"token regex\">/^get_(.*)_info$/</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">Computer</span><span class=\"token punctuation\">.</span>define_component $<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">define_component</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">define_method</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token comment\">#...</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>블록을 grep에 <code class=\"language-text\">$1</code> 에 저장 된다.</li>\n<li>중복 코드가 다 사라졌다.</li>\n<li>요소를 추가하거나 유지 관리할 필요가 없으며 DS에 새 컴포넌트를 추가하면 컴퓨터 클래스에서 자동으로 지원한다</li>\n</ul>\n<h2>method_missing</h2>\n<ul>\n<li>Ghost Method와 Dynamic Proxies...</li>\n<li>루비에서는 컴파일러가 메서드 정의를 강제하지 않으니 없는 메서드를 호출할 수도있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lawyer</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\nnick <span class=\"token operator\">=</span> <span class=\"token constant\">Lawyer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nnick<span class=\"token punctuation\">.</span>talk_simple\n❮ <span class=\"token constant\">NoMethodError</span><span class=\"token punctuation\">:</span> undefined method `talk_simple' <span class=\"token keyword\">for</span> <span class=\"token comment\">#&lt;Lawyer:0x007f801aa81938></span></code></pre></div>\n<ul>\n<li>\n<p>메서드 조회가 어떤식으로 진행되는지 기억하나?</p>\n<ul>\n<li>nick의 클래스로 들어가 인스턴스 메서드를 탐색</li>\n<li>Object로 이동한다음 ... BasicObject로 이동...</li>\n<li>method_missing..</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">nick<span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:method_missing</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:my_method</span>\n❮ <span class=\"token constant\">NoMethodError</span><span class=\"token punctuation\">:</span> undefined method `my_method' <span class=\"token keyword\">for</span> <span class=\"token comment\">#&lt;Lawyer:0x007f801b0f4978></span></code></pre></div>\n<h3>Overriding method_missing</h3>\n<ul>\n<li>unknown messages를 인터셉트하여 override가 가능하다</li>\n<li>각 메시지는 <code class=\"language-text\">method_missing</code> 에서 함수 이름과 매개변수 그리고 호출시 불러진 블록을 포함한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lawyer</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n      puts <span class=\"token string\">\"You called: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>method<span class=\"token delimiter tag\">}</span></span>(<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>args<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>)\"</span>\n      puts <span class=\"token string\">\"(You also passed it a block)\"</span> <span class=\"token keyword\">if</span> block_given<span class=\"token operator\">?</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n  bob <span class=\"token operator\">=</span> <span class=\"token constant\">Lawyer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  bob<span class=\"token punctuation\">.</span>talk_simple<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token comment\"># a block</span>\n<span class=\"token keyword\">end</span>\n❮ <span class=\"token constant\">You</span> called<span class=\"token punctuation\">:</span> talk_simple<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token constant\">You</span> also passed it a block<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>고스트 메서드</h4>\n<ul>\n<li>유사한 메서드를 많이 정의해야 할 경우 method_missing을 통해 직접 정의를 내리고 호출에 응답할 수 있다.</li>\n<li>만약 뭔가를 물었는데 이해 못하면 이렇게 하세요 라고 하는 것과 같다.</li>\n<li>호출자 쪽에선 method_missing에 의해 처리되는 일반 호출처럼 보인다.</li>\n<li>수신자에선 이에 상응하는 메서드가 없다..</li>\n<li>이를 고스트메서드라고 한다.</li>\n</ul>\n<h5>The Hashie Example</h5>\n<ul>\n<li>Hashie Gem.... Hashie::Mash ..</li>\n<li>\n<p>Mash는 루비의 더 강력한 버전의 OpenStruct class</p>\n<ul>\n<li>루비의 변수처럼 동작하는 hash같은 객체</li>\n</ul>\n</li>\n<li>만약 새 속성이 필요하면 지정만 하면 사용이 가능함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'hashie'</span>\nicecream <span class=\"token operator\">=</span> <span class=\"token constant\">Hashie</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Mash</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nicecream<span class=\"token punctuation\">.</span>flavor <span class=\"token operator\">=</span> <span class=\"token string\">\"strawberry\"</span>\nicecream<span class=\"token punctuation\">.</span>flavor                 <span class=\"token comment\"># => \"strawberry\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Hashie</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mash</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Hashie</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">Hash</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> key<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n      match <span class=\"token operator\">=</span> method_name<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token regex\">/(.*?)([?=!]?)$/</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">when</span> <span class=\"token string\">\"=\"</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">[</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>first\n      <span class=\"token comment\"># ...</span>\n      <span class=\"token keyword\">else</span>\n        default<span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>method이름이 =으로 끝나면 method_missing은 속성의 값을 갖고오기 위해 '=' 을 잘라낸 다음 값을 저장.</li>\n<li>호출된 메서드의 이름이 일치하지 않으면 기본값만 반환한다.</li>\n</ul>\n<h4>다이나믹 프록시</h4>\n<ul>\n<li>고스트 메서드는 좋긴 한데 어떤 객체들은 거의 전적으로 의존함</li>\n<li>이런 객체들은 다른 언어로 작성된 객체, 웹서비스 의 래퍼이기도 함</li>\n<li>메서드 호출을 method_missing을 통해 수집하여 래핑된 객체에 전달한다.</li>\n</ul>\n<h5>The Ghee Example</h5>\n<ul>\n<li>Ghee를 통해 gist에 접근하는 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">\"ghee\"</span>\ngh <span class=\"token operator\">=</span> <span class=\"token constant\">Ghee</span><span class=\"token punctuation\">.</span>basic_auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"usr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Your GitHub username and password</span>\nall_gists <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">(</span><span class=\"token string\">\"nusco\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>gists\na_gist <span class=\"token operator\">=</span> all_gists<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\na_gist<span class=\"token punctuation\">.</span>url            <span class=\"token comment\"># => \"https://api.github.com/gists/535077\"</span>\na_gist<span class=\"token punctuation\">.</span>description    <span class=\"token comment\"># => \"Spell: Dynamic Proxy\"</span>\n\na_gist<span class=\"token punctuation\">.</span>star</code></pre></div>\n<ul>\n<li>nusco의 gist를 찾아 측정 gist를 선택</li>\n<li>url, desc를 찍고 star를 남김</li>\n<li>github의 api는 gist 외에도 수십 가지 유형의 객체를 노출한다.</li>\n<li>ghee는 이 모든 객체를 지원해야한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ghee</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceProxy</span>\n  <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n      subject<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">subject</span></span>\n      <span class=\"token variable\">@subject</span> <span class=\"token operator\">||</span><span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>path_prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>req<span class=\"token operator\">|</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>merge<span class=\"token operator\">!</span>params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>먼저 어떻게 사용하는지를 알아야함</li>\n<li>github의 각 유형에 Ghee는 하위 클래스를 정의한다. ( <code class=\"language-text\">Ghee::ResourceProxy</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ghee</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">API</span>\n    <span class=\"token keyword\">module</span> <span class=\"token constant\">Gists</span>\n      <span class=\"token keyword\">class</span> <span class=\"token class-name\">Proxy</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Ghee</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ResourceProxy</span>\n        <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">star</span></span>\n          connection<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>path_prefix<span class=\"token delimiter tag\">}</span></span>/star\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">204</span>\n        <span class=\"token keyword\">end</span>\n<span class=\"token comment\"># ...</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>만약 객체의 상태를 변경하는 메서드를 호출할 때 ( star처럼 ) Ghee는 해당 github url http 호출을 한다.</li>\n<li>하지만 url이나 desc같이 속성에서 읽기만 하는 호출은 <code class=\"language-text\">Ghee::ResourceProxy#method_missing</code>에서 끝난다.</li>\n<li>missing_method는 메시지를 subject에게 포워드한다.</li>\n<li>subject의 구현을 자세히 보면 이 메서드가 github api http 호출을 한다.</li>\n<li>JSON형식의 github 객체를 받아서 해시 같은 객체로 변환함</li>\n<li>그럼 다시 method_missing에서 url attribute를 반환함</li>\n</ul>\n<p>음 우아하지만 메타프로그래밍이 너무 많이 들어가 있어서 헷갈린다.</p>\n<ol>\n<li>Ghee는 github 객체를 동적 해시로 저장한다. 액세스 할 수있다.</li>\n<li>Ghost Method를 호출하여 이러한 해시 특성을 확인할 수 있다.</li>\n<li>\n<p>Ghee는 또한 이러한 해시를 프록시 객체 안에 래핑하여 추가적인 메소드를 통해 더욱 풍부하게 한다.</p>\n<ul>\n<li>프록시는 특정 코드가 필요한 메소드를 구현 ( star 처럼 )</li>\n<li>url과 같이 데이터만 읽는 메서드를 래핑된 해시에 전달</li>\n</ul>\n</li>\n</ol>\n<p>이러한 2단계 디자인 덕에 코드를 매우 압축적으로 유지한다.</p>\n<p>github api 의 변화에 자동 적응</p>\n<h4>Refactoring the Computer Class (Again)</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span>  <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>computer_id<span class=\"token punctuation\">,</span> data_source<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@id</span> <span class=\"token operator\">=</span> computer_id\n    <span class=\"token variable\">@data_source</span> <span class=\"token operator\">=</span> data_source\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>respond_to<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_info\"</span><span class=\"token punctuation\">)</span>\n    info <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>_price\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@id</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token punctuation\">.</span>capitalize<span class=\"token delimiter tag\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>info<span class=\"token delimiter tag\">}</span></span> ($<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>price<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"* <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>result<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token keyword\">if</span> price <span class=\"token operator\">>=</span> <span class=\"token number\">100</span>\n    result\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>respond<em>to</em>missing?</h4>\n<ul>\n<li>만약 컴퓨터에 respond_to? 를 사용하면 ..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">cmp <span class=\"token operator\">=</span> <span class=\"token constant\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\ncmp<span class=\"token punctuation\">.</span>respond_to<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:mouse</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># => false</span></code></pre></div>\n<ul>\n<li>문제가 될 수 있음</li>\n<li>다행히 이를 위한 메커니즘</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">respond_to_missing</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> include_private <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@data_source</span><span class=\"token punctuation\">.</span>respond_to<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>method<span class=\"token delimiter tag\">}</span></span>_info\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">super</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>const_missing</h3>\n<ul>\n<li>Rake에서 충돌 가능성이 높은 클래스 이름을 모듈로 변경했다는 것..</li>\n<li>이름 변경 후 이전 버전, 현재 버전 몽키패치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Module</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">const_missing</span></span><span class=\"token punctuation\">(</span>const_name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> const_name\n      <span class=\"token keyword\">when</span> <span class=\"token symbol\">:Task</span>\n        <span class=\"token constant\">Rake</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>const_warning<span class=\"token punctuation\">(</span>const_name<span class=\"token punctuation\">)</span>\n        <span class=\"token constant\">Rake</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Task</span>\n      <span class=\"token keyword\">when</span> <span class=\"token symbol\">:FileTask</span>\n        <span class=\"token constant\">Rake</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>const_warning<span class=\"token punctuation\">(</span>const_name<span class=\"token punctuation\">)</span>\n        <span class=\"token constant\">Rake</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FileTask</span>\n      <span class=\"token keyword\">when</span> <span class=\"token symbol\">:FileCreationTask</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>존재하지 않는 상수를 참조할 때 루비는 상수의 이름을 심볼로 전달</li>\n<li>클래스 이름은 상수이므로 ...</li>\n<li>더이상 사용되지 않는 클래스 이름을 사용중임을 경고</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'rake'</span>\n  task_class <span class=\"token operator\">=</span> <span class=\"token constant\">Task</span>\n❮ <span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">Deprecated</span> reference to top<span class=\"token operator\">-</span>level constant <span class=\"token string\">'Task'</span> found <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">Use</span> <span class=\"token operator\">--</span>classic<span class=\"token operator\">-</span>namespace on rake command\n<span class=\"token keyword\">or</span> <span class=\"token string\">'require \"rake/classic_namespace\"'</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">Rakefile</span>\n\ntask_class <span class=\"token comment\"># => Rake::Task</span></code></pre></div>\n<h3>리팩터링 마무리</h3>\n<ul>\n<li>두 가지 다른 방법으로 풀었다.</li>\n<li>동적 메서드와 동적 디스패치를 사용</li>\n<li>고스트 메서드를 사용</li>\n</ul>\n<h2>빈 슬레이트</h2>\n<ul>\n<li>디스플레이가 작동하지 않는다..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_computer <span class=\"token operator\">=</span> <span class=\"token constant\">Computer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nmy_computer<span class=\"token punctuation\">.</span>display <span class=\"token comment\"># => 0</span>\n<span class=\"token builtin\">Object</span><span class=\"token punctuation\">.</span>instance_method<span class=\"token punctuation\">.</span>grep <span class=\"token operator\">/</span><span class=\"token operator\">^</span>d<span class=\"token operator\">/</span> <span class=\"token comment\">#=> [:dup, display, ...]</span></code></pre></div>\n<ul>\n<li>이미 있으므로 metho_missing에 도달하지 않는다.</li>\n</ul>\n<h3>BasicObject</h3>\n<ul>\n<li>베이직오브젝트는 소수의 인스턴스 메서드만 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">im <span class=\"token operator\">=</span> <span class=\"token constant\">BasicObject</span><span class=\"token punctuation\">.</span>instance_methods\nim <span class=\"token comment\"># => [:==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]</span></code></pre></div>\n<ul>\n<li>슈퍼 클래스를 지정하지 않으면 Object에서 상속되며</li>\n<li>빈 슬레이트를 원하면 대신 BasicObject에서 직접 상속할 수 있다.</li>\n<li>하지만 특정 메서드를 제거하는게 더 빠를때도</li>\n</ul>\n<h3>Removing Methods</h3>\n<ul>\n<li><code class=\"language-text\">Module#undef_method</code> 혹은 <code class=\"language-text\">Module#remove_method</code> 를 사용하여 클래스에서 메서드를 제거할 수 있음</li>\n<li><code class=\"language-text\">undef_method</code> 는 상속된 메서드를 모함한 모든 메서드를 제거함</li>\n</ul>\n<h4>The Builder Example</h4>\n<ul>\n<li>Builder gem은 XML 제너레이터</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'builder'</span>\n  xml <span class=\"token operator\">=</span> <span class=\"token constant\">Builder</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">XmlMarkup</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:target</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token constant\">STDOUT</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:indent</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  xml<span class=\"token punctuation\">.</span>coder <span class=\"token punctuation\">{</span>\n    xml<span class=\"token punctuation\">.</span>name <span class=\"token string\">'Matsumoto'</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:nickname</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'Matz'</span>\n    xml<span class=\"token punctuation\">.</span>language <span class=\"token string\">'Ruby'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#This code produces the following snippet of XML:</span>\n❮ <span class=\"token operator\">&lt;</span>coder<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>name nickname<span class=\"token operator\">=</span><span class=\"token string\">\"Matz\"</span><span class=\"token operator\">></span><span class=\"token constant\">Matsumoto</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>language<span class=\"token operator\">></span><span class=\"token constant\">Ruby</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>language<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>coder<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>빌더는 중첩된 태그, 속성 등을 지원하기위해 ...</li>\n<li>핵심 아이디어는 이름과 언어와 같은 호출은 모든 호출에 대해 XML태그를 생성하는 <code class=\"language-text\">XmlMarkup#method_missing</code> 에 의해 처리됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">xml<span class=\"token punctuation\">.</span>semester <span class=\"token punctuation\">{</span>\n  xml<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token string\">'Egyptology'</span>\n  xml<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token string\">'Ornithology'</span>\n<span class=\"token punctuation\">}</span>\n❮ <span class=\"token operator\">&lt;</span>semester<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span><span class=\"token constant\">Egyptology</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span><span class=\"token constant\">Ornithology</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>semester<span class=\"token operator\">></span></code></pre></div>\n<p>XmlMarkup이 Object의 하위 클래스인 경우 충돌하지만 메서드를 제거하는 Blank Slate를 상속함</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlankSlate</span>\n    <span class=\"token comment\"># Hide the method named +name+ in the BlankSlate class.  Don't</span>\n    <span class=\"token comment\"># hide +instance_eval+ or any method beginning with \"__\".</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># ...</span>\n      <span class=\"token keyword\">if</span> instance_methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>_blankslate_as_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n          name <span class=\"token operator\">!</span><span class=\"token operator\">~</span> <span class=\"token regex\">/^(__|instance_eval$)/</span>\n        undef_method name\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token comment\"># ...</span>\n    instance_methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>m<span class=\"token operator\">|</span> hide<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>모든 메서드를 다 제거하진 않는다? instance_eval하고 루비에 의해 예약 메소드를 보관 - send</li>\n<li>제거는 가능하지만 제거 안함</li>\n</ul>\n<h3>Computer Class 고치기</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">BasicObject</span></code></pre></div>\n<p>BasicObject에는 <code class=\"language-text\">response_to?</code> 가 없음</p>\n<p><code class=\"language-text\">response_to_missing</code> 다시 제거</p>\n<h2>마무리</h2>\n<ul>\n<li>동적 메서드 및 독적 디스패치로 리팩토링 하였고</li>\n<li>고스트 메서드로도 수정함,</li>\n<li>\n<p>고스트 메서드는 위험할 수 있음</p>\n<ul>\n<li>super를 항상 호출 하고, response<em>to</em>missing 재정의 를 하면 방지</li>\n<li>가끔 버그를 일으킬 수 있음</li>\n<li>메서드목록에서 반환 안됨</li>\n</ul>\n</li>\n<li>하지만 고스트 메서드가 유일한 실행 가능한 선택일수도..</li>\n<li>메서드가 많거나 런타임에 필요한 메서드 호출을 모를때</li>\n<li>Builder - XML 예제처럼</li>\n<li>스타일에 따라 다르긴 하겠지만 의심스러우면 동적 방법, 필요하면 고스트</li>\n</ul>","frontmatter":{"title":"M Ruby - 3. Methods","date":"April 15, 2021","update":"April 15, 2021","tags":["ruby","book"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-3/","readingTime":{"minutes":10.665}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}},"next":{"fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},"pageContext":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","series":"Metaprogramming Ruby","previousPostId":"3ab153c7-ef8e-5540-a0ec-ee7551892012","nextPostId":"ba539d0b-e3b6-507e-90b2-12083666ad46"}},"staticQueryHashes":[]}