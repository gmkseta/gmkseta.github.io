{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-12/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","excerpt":"대규모 시스템에서 메타크로그래밍을 사용할 때 어떤일이 발생하는지 여전히 궁금하다!! 이를 살펴보기 위해 Rails의 가장 인기 있는 기능중 하나인 attribute method에 대해 살펴본다. 참고로 모든 라인을 이해하려고 하지 말고 아이디어 만을 이해하려고 하자 Attribute Methods의 사용 위 처럼 데이터베이스에 tasks라는 테이블을 만든…","html":"<ul>\n<li>대규모 시스템에서 메타크로그래밍을 사용할 때 어떤일이 발생하는지 여전히 궁금하다!!</li>\n<li>이를 살펴보기 위해 Rails의 가장 인기 있는 기능중 하나인 attribute method에 대해 살펴본다.</li>\n<li>참고로 모든 라인을 이해하려고 하지 말고 아이디어 만을 이해하려고 하자</li>\n</ul>\n<h2>Attribute Methods의 사용</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'active_record'</span>\n<span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span><span class=\"token punctuation\">.</span>establish_connection <span class=\"token symbol\">:adapter</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"sqlite3\"</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token symbol\">:database</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"dbfile\"</span>\n<span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span>create_table <span class=\"token symbol\">:tasks</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>t<span class=\"token operator\">|</span>\n  t<span class=\"token punctuation\">.</span>string   <span class=\"token symbol\">:description</span>\n  t<span class=\"token punctuation\">.</span>boolean  <span class=\"token symbol\">:completed</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>위 처럼 데이터베이스에 tasks라는 테이블을 만든다면</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\ntask <span class=\"token operator\">=</span> <span class=\"token constant\">Task</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\ntask<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> <span class=\"token string\">'Clean up garage'</span>\ntask<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\ntask<span class=\"token punctuation\">.</span>save\ntask<span class=\"token punctuation\">.</span>description    <span class=\"token comment\"># => \"Clean up garage\"</span>\ntask<span class=\"token punctuation\">.</span>completed<span class=\"token operator\">?</span>     <span class=\"token comment\"># => true</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ActiveRecord::Base</code> 에서 상속하는 빈 Task 클래스를 정의할 수 있고, 해당 클래스의 객체를 사용하여 데이터베이스와 상호작용이 가능하다.</li>\n<li>\n<p>2개의 쓰기 accessor( 이하 접근자 )</p>\n<ul>\n<li>description = , completed = </li>\n</ul>\n</li>\n<li>\n<p>1개의 읽기 접근자</p>\n<ul>\n<li>description</li>\n</ul>\n</li>\n<li>\n<p>1개의 쿼리 접근자</p>\n<ul>\n<li>completed?</li>\n</ul>\n</li>\n<li>4개의 접근자 모두 정의한 것이 아닌 Active Record에서 generated된 것이다.</li>\n<li>이러한 자동 생성 접근자를 attributes methods라고 한다.</li>\n</ul>\n<h2>복잡한 역사</h2>\n<h3>Rails 1: 간단한 시작</h3>\n<ul>\n<li>첫 버전에서는 단지 몇 줄의 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>attributes <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@attributes</span> <span class=\"token operator\">=</span> attributes_from_column_definition\n      <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attribute_names</span></span>\n      <span class=\"token variable\">@attributes</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span>sort\n    <span class=\"token keyword\">end</span>\n    alias_method <span class=\"token symbol\">:respond_to_without_attributes?</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:respond_to?</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">respond_to</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n      <span class=\"token variable\">@@dynamic_methods</span> <span class=\"token operator\">||</span><span class=\"token operator\">=</span> attribute_names <span class=\"token operator\">+</span>\n                        attribute_names<span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>attr<span class=\"token operator\">|</span> attr <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span>\n                        attribute_names<span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>attr<span class=\"token operator\">|</span> attr <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token variable\">@@dynamic_methods</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> \n      respond_to_without_attributes<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>method_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>arguments<span class=\"token punctuation\">)</span>\n      method_name <span class=\"token operator\">=</span> method_id<span class=\"token punctuation\">.</span>id2name\n      <span class=\"token keyword\">if</span> method_name <span class=\"token operator\">=</span><span class=\"token operator\">~</span> read_method<span class=\"token operator\">?</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">@attributes</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> read_attribute<span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elsif</span> method_name <span class=\"token operator\">=</span><span class=\"token operator\">~</span> write_method<span class=\"token operator\">?</span>\n        write_attribute<span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elsif</span> method_name <span class=\"token operator\">=</span><span class=\"token operator\">~</span> query_method<span class=\"token operator\">?</span>\n        <span class=\"token keyword\">return</span> query_attribute<span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">super</span>\n      <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">read_method</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>_\\w<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>$<span class=\"token operator\">/</span> <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">write_method</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>_\\w<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>$<span class=\"token operator\">/</span>    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">query_method</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>_\\w<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\\<span class=\"token operator\">?</span>$<span class=\"token operator\">/</span>     <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">read_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>         <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">write_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">#...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">query_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li>\n<p>생성자를 먼저 살펴보자</p>\n<ul>\n<li><code class=\"language-text\">@attributes</code> 변수는 데이터베이스의 속성 이름으로 채워진다.</li>\n</ul>\n</li>\n<li>\n<p>method_missing을 보자</p>\n<ul>\n<li>해당 속성의 이름은 Ghost Method의 이름이 된다.</li>\n<li>description= 과 같은 메서드를 호출할 때 method<em>missing은 속성의 이름과, write</em>method의 정규식에 일치한 다는 것을 알 수 있다.</li>\n<li>따라서 write_attribute(\"description\")을 호출하게 된다. 다른 것 들도 비슷한 프로세스이다.</li>\n</ul>\n</li>\n<li>\n<p>3장에서 봤을때 method<em>missing과 함께 respond</em>to? 를 재정의 하는 것이 좋은 아이디어라는 것을 배웠다 </p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">my_task.description</code> 이 호출 가능하면 <code class=\"language-text\">my_task.respond_to?(:description)</code> 이 true를 반환해야한다.</li>\n<li>재정의된 respond<em>to? 는 nil guard를 사용하여  `@@dynamic</em>methods` 에 한 번만 계산하고 클래스 변수에 저장한다.</li>\n</ul>\n</li>\n</ul>\n<h3>Rails 2: 성능에 초첨맞추기</h3>\n<ul>\n<li>method_missing에 대한 설명을 기억하는가?</li>\n<li>존재하지 않는 메서드를 호출하면 Ruby는 해당 메서드를 찾기위해 조상 체인으로 타고 올라간다.</li>\n<li>메서드를 찾지 못하고 BasicObject에 도달하면 맨 아래에서 다시 시작하여 method_missing을 호출한다.</li>\n<li>일반적으로 Ruby가 전체 조상 체인을 한 번 이상 걸어야 하기 때문에 일반 메서드보다 느리다.</li>\n<li>대부분 성능 차이는 무시할 수 있지만 attributes method는 매우 자주 호출 된다.</li>\n<li>define<em>method를 사용하고 method</em>missing을 모두 제거하여 고스트메서드를 동적 메서드로 대체함으로써 이 성능 문제 해결이 가능하다.</li>\n<li>흥미롭게도 그들은 Ghost Method와 Dynamic Method를 모두 포함하는 혼합 솔루션을 택했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>method_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n      method_name <span class=\"token operator\">=</span> method_id<span class=\"token punctuation\">.</span>to_s\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>private_method_defined<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> <span class=\"token constant\">NoMethodError</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to call private method\"</span><span class=\"token punctuation\">,</span> method_name<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token comment\"># If we haven't generated any methods yet, generate them, then</span>\n      <span class=\"token comment\"># see if we've created the method we're looking for.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>generated_methods<span class=\"token operator\">?</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>define_attribute_methods\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>generated_methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>method_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">end</span>\n<span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">read_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>         <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">write_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">query_attribute</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Task#description=</code> 같은 메서드를 처음 호출하면 호출이 method_hissing으로 전달 된다.</li>\n<li>작업을 수행 전 private method 호출은 에러를 발생시킨다.</li>\n<li>그 다음 <code class=\"language-text\">define_attribute_methods</code> 을 호출한다. </li>\n<li>다음에 description= 또는 다른 접근자를 호출할 때 호출은 method_missing에 의해 처리되지 않는다.</li>\n<li>대신 고스트메서드가 아닌 실제 메서드를 호출한다.</li>\n<li>method_missing은 dynamic dispatch를 사용하여 이를 호출하고 결과를 받을 수 있다.</li>\n<li>이 프로세스는 <code class=\"language-text\">generated_methods?</code>로 인해 한 번만 발생하고 건너뛴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">define_attribute_methods</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> generated_methods<span class=\"token operator\">?</span>\n  columns_hash<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>name<span class=\"token punctuation\">,</span> column<span class=\"token operator\">|</span>\n    <span class=\"token keyword\">unless</span> instance_method_already_implemented<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>serialized_attributes<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        define_read_method_for_serialized_attribute<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elsif</span> create_time_zone_conversion_attribute<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span>\n        define_read_method_for_time_zone_conversion<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        define_read_method<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>to_sym<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">unless</span> instance_method_already_implemented<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>=\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> create_time_zone_conversion_attribute<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span>\n        define_write_method_for_time_zone_conversion<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        define_write_method<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>to_sym<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">unless</span> instance_method_already_implemented<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>?\"</span><span class=\"token punctuation\">)</span>\n      define_question_method<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span> \n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">instance_method_already_implemented?</code> 속성 이름의 메서드가 이미 존재하면 이 코드는 다음 속성으로 건너뛴다.</li>\n<li><code class=\"language-text\">define_read_method</code>, <code class=\"language-text\">define_write_method</code> 와 같이 실제 작업을 수행하는 다른 메서드에 위임하는 것 외에는 거의 뭔가를 하지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">define_write_method</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>\n  evaluate_attribute_method attr_name<span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"def <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attr_name<span class=\"token delimiter tag\">}</span></span>=(new_value);write_attribute('<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attr_name<span class=\"token delimiter tag\">}</span></span>', new_value);end\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attr_name<span class=\"token delimiter tag\">}</span></span>=\"</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">evaluate_attribute_method</span></span><span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">,</span> method_definition<span class=\"token punctuation\">,</span> method_name<span class=\"token operator\">=</span>attr_name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">unless</span> method_name<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">==</span> primary_key<span class=\"token punctuation\">.</span>to_s\n    generated_methods <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> method_name\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">begin</span>\n    class_eval<span class=\"token punctuation\">(</span>method_definition<span class=\"token punctuation\">,</span> __FILE__<span class=\"token punctuation\">,</span> __LINE__<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">rescue</span> <span class=\"token constant\">SyntaxError</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> err\n    generated_methods<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>attr_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> logger\n      logger<span class=\"token punctuation\">.</span>warn <span class=\"token string\">\"Exception occurred during reader method compilation.\"</span>\n      logger<span class=\"token punctuation\">.</span>warn <span class=\"token string\">\"Maybe <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attr_name<span class=\"token delimiter tag\">}</span></span> is not a valid Ruby identifier?\"</span>\n      logger<span class=\"token punctuation\">.</span>warn err<span class=\"token punctuation\">.</span>message\n    <span class=\"token keyword\">end</span> \n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">define_write_method</code> 는 class eval을 통해서 String Code를 빌드한다.</li>\n<li><code class=\"language-text\">description=</code> 을 호출하면 evaluate<em>attribute</em>method가 다음 문자열을 eval한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">description</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>write_attribute<span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>속성에 처음 접근할 때 해당 속성은 고스트 메서드이다.</li>\n<li>method_missing을 통해 실제 메서드로 전환한다.</li>\n<li>모든 열에 대한 읽기, 쓰기, 쿼리 접근자를 동적으로 정의한다.</li>\n<li>하지만 모든 속성 접근자에 적용되지는 않는다.</li>\n</ul>\n<h4>동적으로 유지되는 속성</h4>\n<ul>\n<li>ActiveRecord를 통해 속성 접근자를 정의하고 싶지 않은 경우가 있다.</li>\n<li>계산된 필드 같이 데이터베이스 열이 지원하지 않는 속성을 생각해보자</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_query <span class=\"token operator\">=</span> <span class=\"token string\">\"tasks.*, (description like '%garage%') as heavy_job\"</span>\ntask <span class=\"token operator\">=</span> <span class=\"token constant\">Task</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token symbol\">:first</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:select</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> my_query<span class=\"token punctuation\">)</span>\ntask<span class=\"token punctuation\">.</span>heavy_job<span class=\"token operator\">?</span>  <span class=\"token comment\"># => true</span></code></pre></div>\n<ul>\n<li>heavy_job 같은 속성은 객체마다 다를 수 있기 때문에 액세스하기 위해 동적 메서드를 생성할 필요가 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span><span class=\"token punctuation\">(</span>method_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># ...</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>primary_key<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">==</span> method_name\n        id\n      <span class=\"token keyword\">elsif</span> md <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>match_attribute_method<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n        attribute_name<span class=\"token punctuation\">,</span> method_type <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>pre_match<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">.</span>to_s\n        <span class=\"token keyword\">if</span> <span class=\"token variable\">@attributes</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>attribute_name<span class=\"token punctuation\">)</span>\n          __send__<span class=\"token punctuation\">(</span><span class=\"token string\">\"attribute<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>method_type<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">,</span> attribute_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span>\n          <span class=\"token keyword\">super</span> \n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">elsif</span> <span class=\"token variable\">@attributes</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n        read_attribute<span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">super</span>\n      <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">private</span>\n      <span class=\"token comment\"># Handle *? for method_missing.</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attribute</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>attribute_name<span class=\"token punctuation\">)</span>\n        query_attribute<span class=\"token punctuation\">(</span>attribute_name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token comment\"># Handle *= for method_missing.</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attribute</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>attribute_name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        write_attribute<span class=\"token punctuation\">(</span>attribute_name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>method_missing 의 후반부를 보면 객체의 식별자에 액세스 하는 경우는 해당 값을 반환한다.</li>\n<li>속성 접근자를 호출하는 경우는 동적 디스패치 또는 read_attribute에 대한 직접 호출을 사용하여 접근자를 호출한다</li>\n<li>그렇지 않으면 super를 사용하여 상위 체인으로 호출을 보낸다</li>\n</ul>\n<h3>Rails 3,4 : 더 특별한 클래스</h3>\n<ul>\n<li>1에서는 수 십줄의 코드</li>\n<li>2에서는 자체 파일과 수백 줄의 코드</li>\n<li>3에서는 테스트를 포함하지 않은 9개의 소스 코드 파일</li>\n<li>Rails가 커짐에 따라 속성 메서드와 관련된 작은 트릭 및 성능 최적화, 코너 케이스를 발견했다.</li>\n<li>Rails 4에서는 더 나아가 속성 접근자를 정의할때 이를 UnboundMethod로 변환하여 메서드 캐시에 저장한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token keyword\">module</span> <span class=\"token constant\">Read</span>\n      <span class=\"token keyword\">extend</span> <span class=\"token constant\">ActiveSupport</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Concern</span>\n      <span class=\"token keyword\">module</span> <span class=\"token constant\">ClassMethods</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">Module</span><span class=\"token punctuation\">.</span>methods_transplantable<span class=\"token operator\">?</span>\n          <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">define_method_attribute</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            method <span class=\"token operator\">=</span> <span class=\"token constant\">ReaderMethodCache</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n            generated_attribute_methods<span class=\"token punctuation\">.</span>module_eval <span class=\"token punctuation\">{</span> <span class=\"token keyword\">define_method</span> name<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">end</span> \n        <span class=\"token keyword\">else</span>\n          <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">define_method_attribute</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># ...</span>\n          <span class=\"token keyword\">end</span> \n        <span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>define<em>method</em>attribute 라는 메서드를 정의한다.</li>\n<li>concern으로 인해 궁극적으로는 ActiveRecord::Base의 클래스 메서드가 된다.</li>\n<li>\n<p>Module.methods_transplantable?에 따라 다르게 정의된다.</p>\n<ul>\n<li>UnboundMethod를 다른 클래스 객체에 바인딩할 수 있나? - ruby 2.0 이상일 경우</li>\n</ul>\n</li>\n<li>define<em>method</em>attribute는 메서드 캐시에서 UnboundMethod를 검색하고 메서드를 define_method로 현재 모듈에 바인딩한다.</li>\n<li>메서드 캐시는 ReaderMethodCache라는 상수에 저장된다.</li>\n<li>generated<em>attribute</em>methods 은 클린 룸을 제공,</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token keyword\">module</span> <span class=\"token constant\">Read</span>\n      <span class=\"token constant\">ReaderMethodCache</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token constant\">AttributeMethodCache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span>\n        <span class=\"token comment\"># We want to generate the methods via module_eval rather than</span>\n        <span class=\"token comment\"># define_method, because define_method is slower on dispatch.</span>\n        <span class=\"token comment\"># Evaluating many similar methods may use more memory as the instruction</span>\n        <span class=\"token comment\"># sequences are duplicated and cached (in MRI).  define_method may</span>\n        <span class=\"token comment\"># be slower on dispatch, but if you're careful about the closure</span>\n        <span class=\"token comment\"># created, then define_method will consume much less memory.</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\"># But sometimes the database might return columns with</span>\n        <span class=\"token comment\"># characters that are not allowed in normal method names (like</span>\n        <span class=\"token comment\"># 'my_column(omg)'. So to work around this we first define with</span>\n        <span class=\"token comment\"># the __temp__ identifier, and then use alias method to rename</span>\n        <span class=\"token comment\"># it to what we want.</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\"># We are also defining a constant to hold the frozen string of</span>\n        <span class=\"token comment\"># the attribute name. Using a constant means that we do not have</span>\n        <span class=\"token comment\"># to allocate an object on each call to the attribute method.</span>\n        <span class=\"token comment\"># Making it frozen means that it doesn't get duped when used to</span>\n        <span class=\"token comment\"># key the @attributes_cache in read_attribute</span>\n        <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_body</span></span><span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> const_name<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token constant\">EOMETHOD</span>\n          <span class=\"token keyword\">def</span> <span class=\"token comment\">#{method_name}</span>\n            name <span class=\"token operator\">=</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AttributeMethods</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AttrNames</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_</span><span class=\"token comment\">#{const_name}</span>\n            read_attribute<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> missing_attribute<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">end</span>\n          <span class=\"token constant\">EOMETHOD</span>\n        <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span></code></pre></div>\n<ul>\n<li>ReaderMethodCache는 AttributeMethodCache의 하위 클래스인 익명 클래스의 인스턴스이다.</li>\n<li>이 클래스는 String of Code를 반환하는 단일 메서드를 정의한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token constant\">AttrNames</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Module</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_name_cache</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        const_name <span class=\"token operator\">=</span> <span class=\"token string\">\"ATTR_<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>\"</span>\n        <span class=\"token keyword\">unless</span> const_defined<span class=\"token operator\">?</span> const_name\n          const_set const_name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">.</span>freeze\n        <span class=\"token keyword\">end</span> \n      <span class=\"token keyword\">end</span>\n      <span class=\"token punctuation\">}</span>    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeMethodCache</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n        <span class=\"token variable\">@module</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Module</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n        <span class=\"token variable\">@method_cache</span> <span class=\"token operator\">=</span> <span class=\"token constant\">ThreadSafe</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Cache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">def</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token variable\">@method_cache</span><span class=\"token punctuation\">.</span>compute_if_absent<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n          safe_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">'h*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first\n          temp_method <span class=\"token operator\">=</span> <span class=\"token string\">\"__temp__<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>safe_name<span class=\"token delimiter tag\">}</span></span>\"</span>\n          <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AttributeMethods</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">AttrNames</span><span class=\"token punctuation\">.</span>set_name_cache safe_name<span class=\"token punctuation\">,</span> name\n          <span class=\"token variable\">@module</span><span class=\"token punctuation\">.</span>module_eval method_body<span class=\"token punctuation\">(</span>temp_method<span class=\"token punctuation\">,</span> safe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              __FILE__<span class=\"token punctuation\">,</span> __LINE__\n          <span class=\"token variable\">@module</span><span class=\"token punctuation\">.</span>instance_method temp_method\n        <span class=\"token keyword\">end</span> \n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">private</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_body</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">raise</span> <span class=\"token constant\">NotImplementedError</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>\n<p>AttrNames를 보자, set<em>name</em>cache라는 단일 메서드가 있는 모듈이다.</p>\n<ul>\n<li>이름과 값이 주어지면 메서드는 그 값으로 관습적으로 명명된 상수를 정의한다.</li>\n<li>\"description\" => \"ATTR_description\" </li>\n<li>AttrNames는 클린 룸과 유사하다.</li>\n<li>속성의 이름을 나타내는 상수를 저장하기 위해서만 존재한다.</li>\n</ul>\n</li>\n<li>\n<p>AttributeMethodCache를 보자 [] 메서드는 속성의 이름을 사용하고 해당 속성에 대한 접근자를 UnboundMethod로 반환</p>\n<ul>\n<li>속성 접근자는 Ruby 메서드지만 모든 속성 이름이 유효한 Ruby 메서드 이름은 아니다.</li>\n<li>속성의 이름을 16진수 시퀀스로 디코딩하고 기존의 안전한 메서드 이름을 만들어 문제를 해결한다.</li>\n<li>접근자에 대한 안전한 이름이 있으면 method_body를 호출하여 접근자의 본문을 정의하는 코드 문자열을 가져오고</li>\n<li>단순히 @module이라는 이름의 클린룸 내부에 접근자를 정의한다.</li>\n<li>마지막으로 클린룸에서 새로 생성된 접근자 메서드를 가져와 UnboundMethod로 반환한다.</li>\n</ul>\n</li>\n<li>후속 호출에서 AttributeMethodCache#[]은 더 이상 메서드를 저장할 필요가 없다.</li>\n<li>eotls @method<em>cache.compute</em>if_absent가 결과를 저장하고 반환한다</li>\n<li>동일한 접근자가 여러 클래스에 정의된 경우 시간을 단축한다.</li>\n<li>ReaderMethodCache에서 method_body를 재정의하고 일기 접근자에 대한 코드 문자열을 반환함으로써 일반 AttributeMethodCache를 읽기 접근자를 위한 캐시로 바꾼다.</li>\n<li>WriterMethodCache도 있다.</li>\n</ul>\n<h2>교훈</h2>\n<ul>\n<li>\n<p>코드에서 몇 가지 특수한 경우를 다뤄야하나?</p>\n<ul>\n<li>극단적인 경우에는 처음부터 완벽하고 되돌리지 않아도 되는 코드를 작성하기 위해 항상 노력할 수 있다.</li>\n<li>Do It Right First Time . </li>\n<li>하지만 다른 경우에는 당장의 명백한 문제를 해결하는 간단한 코드를 작성하고 나중에 더 특별한 경우를 발견하면 더 포괄적으로 만들 수 있다.</li>\n<li>이 접근 방식을 진화적 설계 라고 부르겠다.</li>\n</ul>\n</li>\n<li>이 두 가지 접근 방식 간의 올바른 균형을 맞추는 게 중요하다.</li>\n<li>Rails1 에서는 간단하고 단순한 솔루션, 2에서는 사용자의 요구사항에 따른 최적화 처럼 진화적인 설계의 좋은 예시이다.</li>\n<li>\n<p>다음을 포함하여 여러 대안이 있었다.</p>\n<ul>\n<li>고스트 메서드에만 의존하여 접근자를 동적으로 정의하지 않는다.</li>\n<li>initialize 메소드에서 개체를 생성할 때 접근자를 정의한다.</li>\n<li>다른 속성이 아닌 액세스 중인 속성에 대해서만 접근자를 정의한다.</li>\n<li>항상 계산된 필드에 대한 접근자를 포함하여 각 개체에 대한 모든 접근자를 정의한다.</li>\n<li>String of Code 대신 define_method를 사용하여 접근자를 정의한다.</li>\n</ul>\n</li>\n<li>몇 가지 대안의 디자인을 시도한 다음 실제 시스템에서 코드를 프로파일리하여 성능의 병목 현상이 발생한 위치를 찾은 다음 최적화하는 것을 쉽게 상상할 수 있다.</li>\n<li>이전 예제는 최적화에 중점을 뒀지만 동일한 원칙이 모든 측변에 적용된다.</li>\n<li>\n<p>private 메서드를 호출하기위해 method_missing을 쓰는 것을 막는 코드를 생각해보자</p>\n<ul>\n<li>모든 경우를 다 잡는건 어렵다.</li>\n<li>합리적인 수의 특별한 경우를 다루고 더 많은 특별한 경우가 보이면 코드를 변경하는 것이 더 쉽다.</li>\n</ul>\n</li>\n<li>\n<p>Rails의 접근 방식은 진화적 설계에 치우져져 있다.</p>\n<ul>\n<li>루비는 메타프로그래밍을 사용할 때 유연한 언어이므로 코드를 쉽게 발전시킬 수 있다.</li>\n<li>완벽한 메타프로그래밍 코드를 미리 작성하는 것은 어렵다. 모든 경우를 찾기 힘드니까.</li>\n</ul>\n</li>\n<li>한 문장으로 요약하자면 코드를 최대한 단순하게 유지하고 필요한 만큼 복잡도를 추가하라 라는 뜻</li>\n<li>시작할 때 일반적인 경우에 코드를 올바르게 만들고 나중에 특별한 경우를 더 추가할 수 있을 정도로 간단하게 만들라. </li>\n<li>이것은 대부분의 코드에 대한 좋은 경험 법칙이지만 메타프로그래밍이 관련된 경우 특히 관련이 있다!</li>\n</ul>","frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화","date":"May 31, 2021","update":"May 31, 2021","tags":["ruby","book"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-12/","readingTime":{"minutes":9}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}},"next":{"fields":{"slug":"/23-InfraStructureAsCode/"},"frontmatter":{"title":"Infrastructure as code"}}},"pageContext":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","series":"Metaprogramming Ruby","previousPostId":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","nextPostId":"ecda0f77-0b85-5ca7-b7e1-02b52c277c4d"}},"staticQueryHashes":[]}