{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-6/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"9d128593-da43-521b-832e-ff48a726844c","excerpt":"메타프로그래밍은 단문장으로 정의할 수 있는 접근법이 아니다. 여태 배운 트릭들을 잘 조합해서 어떻게 문제들을 해결하는지에 대한 장  과제 attraccessor 처럼 클래스 매크로 `attrchecked` 모든 클래스에서 사용하여 더럽게 만드는 것 보단... CheckedAttributes모듈을 포함하는 경우에 클래스가 사용 가능 계획 addchecked…","html":"<ul>\n<li>메타프로그래밍은 단문장으로 정의할 수 있는 접근법이 아니다.</li>\n<li>여태 배운 트릭들을 잘 조합해서 어떻게 문제들을 해결하는지에 대한 장</li>\n</ul>\n<h2></h2>\n<h2>과제</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n <span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">include</span> <span class=\"token constant\">CheckedAttributes</span>\n  attr_checked <span class=\"token symbol\">:age</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>v<span class=\"token operator\">|</span>\n    v <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nme <span class=\"token operator\">=</span> <span class=\"token constant\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nme<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">39</span><span class=\"token comment\"># OK</span>\nme<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token comment\"># Exception</span></code></pre></div>\n<ul>\n<li>attr<em>accessor 처럼 클래스 매크로 `attr</em>checked`</li>\n<li>\n<p>모든 클래스에서 사용하여 더럽게 만드는 것 보단...</p>\n<ul>\n<li>CheckedAttributes모듈을 포함하는 경우에 클래스가 사용 가능</li>\n</ul>\n</li>\n</ul>\n<h2>계획</h2>\n<ol>\n<li>add<em>checked</em>attribute라는 Kernel method 메서드를 eval을 통해 추가한다. - 단순한 유효성 검사 어트리뷰트를 클래스에 추가</li>\n<li>eval을 제거하기 위해 add<em>checked</em>attribute를 리펙터링한다</li>\n<li>블록을 통해 속성을 유효성 검증 한다.</li>\n<li>add<em>checked</em>attributes를 attr_checked라는 클래스 매크로로 변경한다. 모든 클래스에서 사용 가능</li>\n<li>모듈을 추가해서 선택된 클래스만 사용 가능하게 한다.</li>\n</ol>\n<h2>Kernel#eval</h2>\n<ul>\n<li>instance<em>eval, class</em>eval을 이전에 배웠지? Kernel#eval 도 있다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\nel <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\neval<span class=\"token punctuation\">(</span><span class=\"token string\">\"array &lt;&lt; el\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => [10,20,30]</span></code></pre></div>\n<ul>\n<li>위의 예시는 의미가 없지만 코드 문자열을 즉시 evaluate하는건 의미가 있다</li>\n</ul>\n<h3>REST client 예시</h3>\n<ul>\n<li><code class=\"language-text\">gem install rest-client</code></li>\n<li>REST Client는 간단한 http 클라이언트 라이브러리이다.</li>\n<li>http 메서드와 함께 일반 루비 명령을 실행할 수 있는 인터프리터가 포함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">restclient http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>twitter<span class=\"token punctuation\">.</span>com\n   <span class=\"token operator\">></span> html_first_chars <span class=\"token operator\">=</span> get<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token number\">.14</span><span class=\"token punctuation\">]</span>\n   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"&lt;!DOCTYPE html>\"</span>\n\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">RestClient</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get</span></span><span class=\"token punctuation\">(</span>additional_headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">post</span></span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> additional_headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">put</span></span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> additional_headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">delete</span></span><span class=\"token punctuation\">(</span>additional_headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li>소스를 보면 네 가지의 기본 HTTP 메서드가 리소스 클래스에 정의되어 있다.</li>\n<li>인터프리터에서 이 메서드들을 사용할 수 있도록 특정 url의 리소스 메서드에 위임하는 최상위 메서드를 정의한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span>  <span class=\"token method-definition\"><span class=\"token function\">get</span></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  r<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>하지만 이런 것들을 일일이 정의하는 것이 아닌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">POSSIBLE_VERBS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">POSSIBLE_VERBS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>m<span class=\"token operator\">|</span>\n  eval <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>end_eval\n    <span class=\"token keyword\">def</span>  <span class=\"token comment\">#{m}(path, *args, &amp;b)</span>\n        r<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token comment\">#{m}(*args, &amp;b)</span>\n    <span class=\"token keyword\">end</span>\n  end_eval\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>here document - heredoc 이라고 알려진 구문을 사용</li>\n<li>&#x3C;&#x3C;- 시퀀스로 시작하여 end_eval로 끝나는데</li>\n<li>&#x3C;&#x3C;- end<em>eval 은 end</em>eval이라는 문구가 나오면 끝난다는 것</li>\n</ul>\n<h3>Binding Objects</h3>\n<ul>\n<li>바인딩은 객체로 패키지된 전체 스코프이다.</li>\n<li>바인딩을 생성해서 로컬 스코프를 캠쳐하고, 이동할 수 있다는 아이디어</li>\n<li>나중에 바인딩 객체를 eval과 함께 사용하여 해당 스코프에서 코드를 실행할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n    <span class=\"token variable\">@x</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    binding\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\nb <span class=\"token operator\">=</span> <span class=\"token constant\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>my_method</code></pre></div>\n<ul>\n<li>바인딩 객체는 스코프를 포함하지만 코드는 포함하지 않는다, 따라서 블록보다 순수한 형태의 클로저라고 생각할 수 있다.</li>\n<li>바인딩을 evaluate할 추가 인수로 전달하여 캡쳐된 스코프의 코드를 eval 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">eval <span class=\"token string\">\"@x\"</span><span class=\"token punctuation\">,</span> b       <span class=\"token comment\"># => 1</span></code></pre></div>\n<ul>\n<li>TOPLEVEL_BINDING이라는 미리 정의된 상수, 최상위 스코프의 바인딩</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AnotherClass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span>\n    eval <span class=\"token string\">\"self\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TOPLEVEL_BINDING</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token constant\">AnotherClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>my_method    <span class=\"token comment\"># => main</span></code></pre></div>\n<ul>\n<li>이런 바인딩 오브젝트를 유용하게 쓴 잼이 Pry</li>\n<li>Object#pry 를 정의하고, 이 함수를 디버거로 사용할 수 있다.</li>\n<li>중단점을 설정하는 대신 현재 바인딩을 호출하는 줄을 코드에 추가한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># code...</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">\"pry\"</span><span class=\"token punctuation\">;</span> binding<span class=\"token punctuation\">.</span>pry\n<span class=\"token comment\"># more code...</span></code></pre></div>\n<ul>\n<li>ruby interpreter를 현재 바인딩에서 열고 ~</li>\n</ul>\n<h4>IRB 예시</h4>\n<ul>\n<li>irb는 표준 입력이나 파일을 파싱하고 각 줄을 통과시켜 eval하는 단순한 프로그램</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">eval<span class=\"token punctuation\">(</span>statements<span class=\"token punctuation\">,</span> <span class=\"token variable\">@binding</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>irb 소스코드의 깊은 곳에 있는 eval 호출</li>\n<li>statements는 그냥 루비 코드</li>\n<li>\n<p>binding - 다른 맥락에서 코드를 eval하기 위해 이 인수를 변경 가능하다.</p>\n<ul>\n<li>특정 객체에서 중첩된 irb세션을 열 때 기존 irb 세션의 객체 이름 뒤에 irb를 입력함</li>\n<li>해당 객체 맥락에서 eval 될 것</li>\n</ul>\n</li>\n<li>file, line은 예외가 났을 때 스택을 주적하는데 사용됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span>\n<span class=\"token constant\">ZeroDivisionError</span><span class=\"token punctuation\">:</span> divided by <span class=\"token number\">0</span>\nfrom exception<span class=\"token punctuation\">.</span>rb<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token symbol\">:in</span> `<span class=\"token operator\">/</span>'</code></pre></div>\n<h4>String of Code vs Block</h4>\n<ul>\n<li>문자열의 코드는 결국 블록과 다를바가 없다.</li>\n<li>하지만 되도록 블록으로..</li>\n</ul>\n<h4>eval()의 문제</h4>\n<ul>\n<li>\n<p>꿀이지만 그만큼 위험이 따름</p>\n<ul>\n<li>ide에서 하이라이팅이 잘 안 될 수도 있다.</li>\n<li>정적 분석으로 에러를 찾기가 아려워서 ide에서도 워닝을 못뱉음</li>\n</ul>\n</li>\n<li>위의 에러들은 사실 보안 이슈에 비하면 사소하지</li>\n</ul>\n<h4>코드 인젝션</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">explore_array</span></span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n  code <span class=\"token operator\">=</span> <span class=\"token string\">\"['a', 'b', 'c'].<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>method<span class=\"token delimiter tag\">}</span></span>\"</span>\n  puts <span class=\"token string\">\"Evaluating: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>code<span class=\"token delimiter tag\">}</span></span>\"</span>\n  eval code\n<span class=\"token keyword\">end</span>\nloop <span class=\"token punctuation\">{</span> p explore_array<span class=\"token punctuation\">(</span>gets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>마지막 줄의 무한 루프는 표준 입력에서 문자열을 받아다가 expect_array의 메서드로 넣는다.</li>\n<li>code를 eval하고 print</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">➾ find_index<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n❮ <span class=\"token constant\">Evaluating</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>find_index<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n\n➾ map<span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>e<span class=\"token operator\">|</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">next</span> <span class=\"token punctuation\">}</span>\n❮ <span class=\"token constant\">Evaluating</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map<span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>e<span class=\"token operator\">|</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">next</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>이 코드를 사용자가 입력한다면</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">➾ object_id<span class=\"token punctuation\">;</span> <span class=\"token builtin\">Dir</span><span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n❮ <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>object_id<span class=\"token punctuation\">;</span> <span class=\"token builtin\">Dir</span><span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>your own <span class=\"token keyword\">private</span> information here<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>악의적인 사용자가 컴퓨터에서 임의 코드를 실행할 수 있다.</li>\n<li>code injection attack</li>\n</ul>\n<h5>코드 인젝션 막기</h5>\n<ul>\n<li>구문을 분석할 수도 있겠지만 악성 코드 작성 방법은 많으니까 효과적이지 않을 수 있다.</li>\n<li>\n<p>사용자가 직접 작성한 문자열만 악성 코드를 포함할 수 있으므로 사용자가 작성한 문자열에 대한 eval을 금지할 수도 있다.</p>\n<ul>\n<li>많이 복잡한 경우는 문자열이 어디서 왔는지 알기 어려울지도... 추적 계속 해야하니</li>\n</ul>\n</li>\n<li>\n<p>이런 어려움 때문에 어떤 프로그래머들은 eval을 전면 금지하자고 하기도 함</p>\n<ul>\n<li>이는 꽤 인기 있는 선택</li>\n<li>잘못될 수 잇는 것에 대해 편집증적인 경향</li>\n</ul>\n</li>\n<li>\n<p>eval을 안쓰면 사례별로 대체 기법을 찾아야 한다.</p>\n<ul>\n<li>동적 메서드와 동적 디스패치로 대체 가능</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">POSSIBLE_VERBS</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>m<span class=\"token operator\">|</span>\n  <span class=\"token keyword\">define_method</span> m <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token operator\">|</span>\n    r<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">explore_array</span></span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>arguments<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>하지만 사용자가 block을 못씀, 임의의 문자열을 코드로 삽입하도록 해야한다..</li>\n<li>eval과 eval을 안쓰는 방식에서 선택이 어렵지....</li>\n<li>이하 eval을 그나마 안전하게 쓰는 기능을 제공</li>\n</ul>\n<h4>Tainted Objects and Safe Levels</h4>\n<ul>\n<li>루비는 잠재적으로 안전하지 않은 객체에 대해 - 특히 외부 소스에서 온 객체를 tainted로 자동 표시한다.</li>\n<li>tainted ( 오염된 ) 객체는 프로그램이 web form, file, command line, 혹은 시스템 변수에서 읽는 문자열</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># read user input</span>\nuser_input <span class=\"token operator\">=</span> <span class=\"token string\">\"User input: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>\"</span>\nputs user_input<span class=\"token punctuation\">.</span>tainted<span class=\"token operator\">?</span>\n➾x<span class=\"token operator\">=</span><span class=\"token number\">1</span> ❮ <span class=\"token boolean\">true</span></code></pre></div>\n<ul>\n<li>루비는 오염된 객체를 잘 보완해주는 safe level이라는 개념을 제공한다</li>\n<li>\n<p>$SAFE 전역 변수로 안전 수준을 설정하면, 잠재적인 위험한 작업을 허용하지 않는다.</p>\n<ul>\n<li>0 - 3 까지</li>\n<li>1이상이면 tainted 문자열을 eval 못함</li>\n<li>2이면 대부분의 파일 관련 작업을 수행할 수 없음</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token variable\">$SAFE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nuser_input <span class=\"token operator\">=</span> <span class=\"token string\">\"User input: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter tag\">}</span></span>\"</span>\neval user_input</code></pre></div>\n<ul>\n<li>안전 수준에 의존하여 디스크 액세스 같은 위험한 작업을 허용하지 않도록 할 수 있다.</li>\n</ul>\n<h4>ERB 예시</h4>\n<ul>\n<li>ERB는 루비 기본 템플릿 시스템임</li>\n<li>HTML에 ruby code를 내장하여 사용하는 코드 프로세서</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"erb\"><pre class=\"language-erb\"><code class=\"language-erb\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Wake up!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span> It's a nice sunny <span class=\"token erb language-erb\"><span class=\"token delimiter punctuation\">&lt;%=</span> <span class=\"token builtin\">Time</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%A\"</span><span class=\"token punctuation\">)</span> <span class=\"token delimiter punctuation\">%></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;%= .. %&gt;</code> 안에 ruby code를 넣어두면 evaluate</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'erb'</span>\nerb <span class=\"token operator\">=</span> <span class=\"token constant\">ERB</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">'template.rhtml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nerb<span class=\"token punctuation\">.</span>run\n❮ <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span><span class=\"token constant\">Wake</span> up<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span> <span class=\"token constant\">It</span>'s a nice sunny <span class=\"token constant\">Friday</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">ERB</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">result</span></span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">=</span>new_toplevel<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token variable\">@safe_level</span>\n        proc <span class=\"token punctuation\">{</span>\n          <span class=\"token variable\">$SAFE</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@safe_level</span>\n          eval<span class=\"token punctuation\">(</span><span class=\"token variable\">@src</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@filename</span> <span class=\"token operator\">||</span> <span class=\"token string\">'(erb)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>call\n      <span class=\"token keyword\">else</span>\n        eval<span class=\"token punctuation\">(</span><span class=\"token variable\">@src</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@filename</span> <span class=\"token operator\">||</span> <span class=\"token string\">'(erb)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token comment\">#...</span></code></pre></div>\n<ul>\n<li>new<em>toplevel은 TOPLEVEL</em>BINDING의 복사본을 반환하는 메서드</li>\n<li>\n<p>안전수준이 설정 되어있으면 포함</p>\n<ul>\n<li>샌드박스를 구축한다.</li>\n<li>별도의 범위에서 코드를 실행하기 위해 clean room을 사용함</li>\n<li>안전 수준은 proc 안에서만 적용이 됨</li>\n<li>-</li>\n</ul>\n</li>\n<li>아니면 바로 eval</li>\n</ul>\n<h2>1단계 일단 간단하게 eval로</h2>\n<p>checked_attribute를 만들 계획을 세웠던 대로 진행!</p>\n<ol>\n<li>eval을 사용하여 add<em>checked</em>attribute라는 커널 메서드를 작성</li>\n<li>eval을 제거</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'test/unit'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCheckedAttribute</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span>\n    add_checked_attribute<span class=\"token punctuation\">(</span><span class=\"token constant\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:age</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@bob</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_accepts_valid_values</span></span>\n    <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    assert_equal <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_refuses_nil_values</span></span>\n    assert_raises <span class=\"token constant\">RuntimeError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_refuses_false_values</span></span>\n    assert_raises <span class=\"token constant\">RuntimeError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\"># Here is the method that you should implement.</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add_checked_attribute</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add_checked_attribute</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">)</span>\n  eval \"<span class=\"token keyword\">class</span> <span class=\"token comment\">#{klass}</span>\n        <span class=\"token keyword\">def</span> <span class=\"token comment\">#{attribute}=(value)</span>\n          <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> value\n          @<span class=\"token comment\">#{attribute} = value</span>\n        <span class=\"token keyword\">end</span>\n        <span class=\"token keyword\">def</span> <span class=\"token comment\">#{attribute}()</span>\n          @<span class=\"token comment\">#{attribute}</span>\n        <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\"\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">add_checked_attribute</code> 를 한 뒤 String클래스</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_attr</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> value\n    <span class=\"token variable\">@my_attr</span> <span class=\"token operator\">=</span> value\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_attr</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@my_attr</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>Open Class로 처리가 되고, 두 새로운 메서드를 가지게 된다.</li>\n</ul>\n<h2>2단계 Eval 빼기</h2>\n<ul>\n<li>eval을 뿌시자</li>\n<li>일반 루비 메서드로 대체!</li>\n<li>\n<p>왜 eval을 뿌셔야하는 강박관념이 생겼을까... ?</p>\n<ul>\n<li>팀원들만 사용하는데 코드 인젝션의 표적이 되나? 아니지</li>\n<li>하지만 이 메서드가 나중에 세상에 드러날 수 있으니...?</li>\n<li>Strings of Code를 안 쓰고 만들면 더 명확하고 우아하게 제공 가능하고 하이라이터들이 덜 홀란스러워 할 것이다.</li>\n</ul>\n</li>\n<li>플랫 스코프 기억하니?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add_checked_attribute</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">)</span>\n  klass<span class=\"token punctuation\">.</span>class_eval <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">define_method</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>value<span class=\"token operator\">|</span>\n      <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> value\n      instance_variable_set<span class=\"token punctuation\">(</span><span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">define_method</span> attribute <span class=\"token keyword\">do</span>\n      instance_variable_get <span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>해단 클래스의 스코프에 들어가야 한다.</li>\n<li>eval을 제거하면 클래스 키워드를 사용할 수 없으므로 class_eval을 사용하여 스코프에 들어간다.</li>\n<li>런타임에서 메서드의 이름을 알 수 없으니 define_method를 사용해야한다.</li>\n</ul>\n<h2>3단계 블록으로 검증</h2>\n<ul>\n<li>블록으로 속성 검증이 가능해야한다, - 유연하게</li>\n<li>하지만 지금은 0혹은 false 할당시 예외</li>\n<li>새로운 테스트 필요함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'test/unit'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCheckedAttribute</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span>\n    add_checked_attribute<span class=\"token punctuation\">(</span><span class=\"token constant\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>v<span class=\"token operator\">|</span> v <span class=\"token operator\">>=</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token variable\">@bob</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_accepts_valid_values</span></span>\n    <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    assert_equal <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_refuses_invalid_values</span></span>\n    assert_raises <span class=\"token constant\">RuntimeError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add_checked_attribute</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>validation<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ... (The code here doesn't pass the test. Modify it.)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add_checked_attribute</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>validation<span class=\"token punctuation\">)</span>\n  klass<span class=\"token punctuation\">.</span>class_eval <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">define_method</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>value<span class=\"token operator\">|</span>\n      <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> validation<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      instance_variable_set<span class=\"token punctuation\">(</span><span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">define_method</span> attribute <span class=\"token keyword\">do</span>\n      instance_variable_get <span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>4단계 클래스 매크로!</h2>\n<ul>\n<li>일단 테스트 케이스를 변경</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n  attr_checked <span class=\"token symbol\">:age</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>v<span class=\"token operator\">|</span>\n   v <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCheckedAttributes</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span>\n    <span class=\"token variable\">@bob</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_accepts_valid_values</span></span>\n    <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    assert_equal <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_refuses_invalid_values</span></span>\n    assert_raises <span class=\"token constant\">RuntimeError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n    <span class=\"token keyword\">end</span>\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>Class 클래스에서 정의한다!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attr_checked</span></span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>validation<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">define_method</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>value<span class=\"token operator\">|</span>\n      <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> validation<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      instance_variable_set<span class=\"token punctuation\">(</span><span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">define_method</span> attribute <span class=\"token keyword\">do</span>\n      instance_variable_get <span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>Hook Methods</h2>\n<ul>\n<li>클래스가 상속될 때 코드를 실행 할 수 있다!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">inherited</span></span><span class=\"token punctuation\">(</span>subclass<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token keyword\">self</span><span class=\"token delimiter tag\">}</span></span> was inherited by <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>subclass<span class=\"token delimiter tag\">}</span></span>\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyString</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n<span class=\"token builtin\">String</span> was inherited by <span class=\"token constant\">MyString</span></code></pre></div>\n<ul>\n<li>상속 메서드는 클래스의 인스턴스 메서드</li>\n<li>원래는 아무런 작업도 수행하지 않지만 재정의 가능</li>\n</ul>\n<h3>More Hooks</h3>\n<ul>\n<li>라이프 사이클에 연결이 가능하도록 모듈에서도 제공!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">M1</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">included</span></span><span class=\"token punctuation\">(</span>othermod<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"M1 was included into <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>othermod<span class=\"token delimiter tag\">}</span></span>\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">module</span> <span class=\"token constant\">M2</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepended</span></span><span class=\"token punctuation\">(</span>othermod<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"M2 was prepended to <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>othermod<span class=\"token delimiter tag\">}</span></span>\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">M1</span>\n  <span class=\"token keyword\">prepend</span> <span class=\"token constant\">M2</span>\n<span class=\"token keyword\">end</span>\n❮ <span class=\"token constant\">M1</span> was included into <span class=\"token constant\">C</span> <span class=\"token constant\">M2</span> was prepended to <span class=\"token constant\">C</span>\n\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">M</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">method_added</span></span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"New method: M#<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>method<span class=\"token delimiter tag\">}</span></span>\"</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">my_method</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n❮ <span class=\"token constant\">New</span> method<span class=\"token punctuation\">:</span> <span class=\"token constant\">M</span><span class=\"token comment\">#my_method</span></code></pre></div>\n<ul>\n<li>include/prepend시 실행 가능</li>\n<li>모듈을 재정의하여 객체를 확장할 때 코드 실행 가능</li>\n</ul>\n<p>이런 훅들은..</p>\n<ul>\n<li>singleton method에서는 못쓴다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">include</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>modules<span class=\"token punctuation\">)</span>\n    puts <span class=\"token string\">\"Called: C.include(<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>modules<span class=\"token delimiter tag\">}</span></span>)\"</span>\n    <span class=\"token keyword\">super</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">M</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>다른 쪽에서 동일한 이벤트에 연결 가능함!</li>\n<li>Module#included 을 오버라이딩 하는 것과, Module#include를 오버라이딩 하는 것은 차이가 있음</li>\n<li>include에는 실제 작업이 있으므로 super를 포함 꼭 시켜야함</li>\n</ul>\n<h3>VCR 예시</h3>\n<ul>\n<li>VCR 잼은 HTTP 요청을 녹화하고 리플레이하는 잼이다.</li>\n<li>VCR의 Request 클래스에 Normalizers:Body가 포함되어있다.</li>\n<li>Body 모듈은 body_from 같이 http message body를 다루는 클래스 메서드를 추가한다.</li>\n<li>하지만 클래스는 일반적으로 클래스 메서드가 아닌 모듈을 포함해서 인스턴스 메서드를 갖고오지 않는가?</li>\n<li>어떻게 얘는 mixin할까</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">VCR</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Normalizers</span>\n    <span class=\"token keyword\">module</span> <span class=\"token constant\">Body</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">included</span></span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span>\n        klass<span class=\"token punctuation\">.</span><span class=\"token keyword\">extend</span> <span class=\"token constant\">ClassMethods</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">module</span> <span class=\"token constant\">ClassMethods</span>\n        <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">body_from</span></span><span class=\"token punctuation\">(</span>hash_or_string<span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">#...</span></code></pre></div>\n<ul>\n<li>include를 시키면 Body의 included 훅을 호출</li>\n<li>Request을 ClassMethods 모듈로 확장한다.</li>\n<li>확장 메서드는 요청의 싱글톤 클래스에 ClassMethods의 메서드를 포함시킨다.</li>\n</ul>\n<p>ClassMethods - plus - hook 관용구는 꽤 흔하고 레일즈 코드에서 광범위하게 썼다.</p>\n<p>하지만 다른 매커니즘으로 지금 변경되었고 VCR이나 다른 잼에서 이 예를 찾을 수 있다.</p>\n<h2>5단계 필요한 클래스에서만!</h2>\n<ul>\n<li>checkedAttributes라는 모듈을 포함한 클래스에서만 사용할 수 있도록 변경</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'test/unit'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">CheckedAttributes</span>\n  attr_checked <span class=\"token symbol\">:age</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>v<span class=\"token operator\">|</span>\n    v <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCheckedAttributes</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">setup</span></span>\n    <span class=\"token variable\">@bob</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_accepts_valid_values</span></span>\n    <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n    assert_equal <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_refuses_invalid_values</span></span>\n    assert_raises <span class=\"token constant\">RuntimeError</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@bob</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">CheckedAttributes</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">included</span></span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n    base<span class=\"token punctuation\">.</span><span class=\"token keyword\">extend</span> <span class=\"token constant\">ClassMethods</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">attr_checked</span></span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>validation<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">define_method</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>value<span class=\"token operator\">|</span>\n          <span class=\"token keyword\">raise</span> <span class=\"token string\">'Invalid attribute'</span> <span class=\"token keyword\">unless</span> validation<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n          instance_variable_set<span class=\"token punctuation\">(</span><span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">define_method</span> attribute <span class=\"token keyword\">do</span>\n        instance_variable_get <span class=\"token string\">\"@<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>attribute<span class=\"token delimiter tag\">}</span></span>\"</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>굿!</p>\n<h2>정리</h2>\n<ul>\n<li>메타프로그래밍 문제를 풀었다. 그 과정에서 eval과 이에 대한 문제점 및 해결 방안을 배움</li>\n<li>hook methods를 알게되었다.</li>\n</ul>","frontmatter":{"title":"M Ruby - 6. Code That Writes Code","date":"May 02, 2021","update":"May 02, 2021","tags":["ruby","book"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-6/","readingTime":{"minutes":9.71}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}},"next":{"fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},"pageContext":{"id":"9d128593-da43-521b-832e-ff48a726844c","series":"Metaprogramming Ruby","previousPostId":"10646ae4-ced4-5411-87f6-7011a8f5c108","nextPostId":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a"}},"staticQueryHashes":[]}