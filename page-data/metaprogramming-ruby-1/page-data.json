{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-1/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","excerpt":"회사에서 조만간 루비를 안 쓰게 될 것 같다. 루비를 보내주는 마지막 공부..... 아니면 언젠가 이직하면 레일즈를 쓰는 회사로 이직을 하게될까? Metaprogramming Ruby 아무튼 Metaprogramming Ruby라는 책을 읽어 보려한다. 올리는 글은 챕터별 정리와 사견 되도록 우리나라에 출판된 번역본 책은 안 올리려고 하는데 이 책은 번역…","html":"<p>회사에서 조만간 루비를 안 쓰게 될 것 같다.</p>\n<p><del>루비를 보내주는 마지막 공부.....</del></p>\n<p>아니면 언젠가 이직하면 레일즈를 쓰는 회사로 이직을 하게될까?</p>\n<h2>Metaprogramming Ruby</h2>\n<p>아무튼 Metaprogramming Ruby라는 책을 읽어 보려한다. 올리는 글은 챕터별 정리와 사견</p>\n<p>되도록 우리나라에 출판된 번역본 책은 안 올리려고 하는데</p>\n<p>이 책은 번역본도 없고 깃헙에 pdf로 올라와 있어서 한번 해본다.</p>\n<h2>The M Word</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">메타 프로그래밍은 코드를 쓰는 코드이다.</code></pre></div>\n<p>일단은 이 정도가 제일 간단한 정의이다. 자세한 얘기 이전에 먼저 프로그래밍 언어 자체에 대해 살펴본다.</p>\n<h2>유령 마을 vs 시끌시끌한 시장</h2>\n<ul>\n<li>소스 코드를 변수, 클래스, 메서드 등의 활기찬 시민들로 가득 찬 세상으로 생각해 보자</li>\n<li>\n<p>많은 프로그래밍 언어에서 이 시민들은 유령 같다</p>\n<ul>\n<li>C++를 예로 들면 컴파일러가 작업을 마치면 변수나 메서드 같은 것들은 형태를 잃는다.....!</li>\n<li>런타임에서 다 사라지고 유령 같지</li>\n</ul>\n</li>\n<li>\n<p>루비와 같은 언어에서 런타임은 시끌시끌한 시장 같다.</p>\n<ul>\n<li>대부분의 언어 구조들이 여전히 생생하게 살아있고</li>\n<li>심지어 언어 구조까지 걸어갈 수 있고 그것에 관한 질문을 할 수도 있다.</li>\n<li>이를 <code class=\"language-text\">Introspection</code>이라고 한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># the_m_word/introspection.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@text</span> <span class=\"token operator\">=</span> text\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">welcome</span></span>\n    <span class=\"token variable\">@text</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_object <span class=\"token operator\">=</span> <span class=\"token constant\">Greeting</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Greeting</code> 클래스를 정의하고 객체를 만들었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_object<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>                             <span class=\"token comment\"># => Greeting</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">my_object</code> 에게 클래스가 뭐냐고 물어보면 확실하게 <code class=\"language-text\">Greeting 이다~~~</code> 라고 답해줌</li>\n<li>그럼 이제 그 클래스로부터 인스턴스 메서드의 리스트를 물어볼 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_object<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>instance_methods<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># => [:welcome]</span></code></pre></div>\n<ul>\n<li>클래스는 메서드 이름을 포함하는 배열로 답을 해준다. <code class=\"language-text\">[:welcome]</code></li>\n<li>false 인수는 상속받은 메서드는 나열하지 않는다는 뜻</li>\n<li>그럼 객체를 보면서 인스턴스 변수에 대해 물어보자</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_object<span class=\"token punctuation\">.</span>instance_variables                <span class=\"token comment\"># => [:@text]</span></code></pre></div>\n<ul>\n<li>잘~ 답해준다.</li>\n<li>루비에서 객체와 클래스는 일급 시민( FIrst-class citizens )이기 때문에 우리는 많은 정보들을 얻을 수 있다.</li>\n</ul>\n<h3>-</h3>\n<p>우리는 루비에서 런타임에 언어의 구조를 읽을 수 있다 !</p>\n<p>하지만 작성하는 것은??? 프로그램이 실행되는 동안 Greeting에 새 인스턴스 메서드를 추가하려면???</p>\n<h2>메타프로그래머 이야기</h2>\n<ul>\n<li>데이터베이스에 객체를 저장하기 위한 간단한 라이브러리를 구축해보자</li>\n</ul>\n<h3>첫 번째 시도</h3>\n<ul>\n<li>각 클래스를 데이터베이스 테이블에 매핑하고 각 객체를 레코드에 매핑한다.</li>\n<li>객체를 생성하거나 그 속성에 액세스 할 때 객체는 SQL 문자열을 생성하여 데이터베이스로 보낸다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\">#the_m_word/orm.rb</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity</span>\n  attr_reader <span class=\"token symbol\">:table</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:ident</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">,</span> ident<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@table</span> <span class=\"token operator\">=</span> table\n    <span class=\"token variable\">@ident</span> <span class=\"token operator\">=</span> ident\n    <span class=\"token constant\">Database</span><span class=\"token punctuation\">.</span>sql <span class=\"token string\">\"INSERT INTO <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@table</span><span class=\"token delimiter tag\">}</span></span> (id) VALUES (<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@ident</span><span class=\"token delimiter tag\">}</span></span>)\"</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">set</span></span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">Database</span><span class=\"token punctuation\">.</span>sql <span class=\"token string\">\"UPDATE <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@table</span><span class=\"token delimiter tag\">}</span></span> SET <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>col<span class=\"token delimiter tag\">}</span></span>='<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>val<span class=\"token delimiter tag\">}</span></span>' WHERE id=<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@ident</span><span class=\"token delimiter tag\">}</span></span>\"</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get</span></span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">Database</span><span class=\"token punctuation\">.</span>sql <span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>col<span class=\"token delimiter tag\">}</span></span> FROM <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@table</span><span class=\"token delimiter tag\">}</span></span> WHERE id=<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@ident</span><span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>SQL을 알고있다면 읽을 만 할 듯</li>\n<li><code class=\"language-text\">Entity</code>에서 id값, 테이블 이름을 갖고있고 <code class=\"language-text\">Entity</code>를 생성하고 나면 데이터베이스에 저장된다</li>\n<li><code class=\"language-text\">Entity#set</code>은 컬럼의 값을 업데이트, <code class=\"language-text\">Entity#get</code>은 컬럼의 값을 갖고 온다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Entity</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>ident<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span> <span class=\"token string\">\"movies\"</span><span class=\"token punctuation\">,</span> ident\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">title</span></span>\n    get <span class=\"token string\">\"title\"</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">title</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    set <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> value\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">director</span></span>\n    get <span class=\"token string\">\"director\"</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">director</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    set <span class=\"token string\">\"director\"</span><span class=\"token punctuation\">,</span> value\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Entity</code>클래스로 <code class=\"language-text\">Movie</code>를 정의해봤다.</li>\n<li><code class=\"language-text\">Movie</code> 클래스는 <code class=\"language-text\">title</code>, <code class=\"language-text\">director</code> 에 대한 reader , writer를 갖고있다.</li>\n<li>\n<p>다음과 같은 코드로 새 영화를 데이터베이스에 넣을 수 있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">movie <span class=\"token operator\">=</span> <span class=\"token constant\">Movie</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nmovie<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Doctor Strangelove\"</span>\nmovie<span class=\"token punctuation\">.</span>director <span class=\"token operator\">=</span> <span class=\"token string\">\"Stanley Kubrick\"</span></code></pre></div>\n</li>\n<li>이제 데이터베이스에 id가 1인 영화가 생겼다!</li>\n<li>( <code class=\"language-text\">director = &quot;~~~&quot;</code> 이 꼴은 <code class=\"language-text\">director=(&quot;~~~&quot;)</code> 이거랑 동일 )</li>\n</ul>\n<p><strong>하지만 중복이 많다.</strong></p>\n<p>데이터베이스의 컬럼에도 <code class=\"language-text\">title</code>을 갖고있고, <code class=\"language-text\">Movie</code>클래스에도 <code class=\"language-text\">@title</code> 필드를 갖고있다.</p>\n<p>그리고 <code class=\"language-text\">title</code> 메서드를 갖고있고 두개의 <code class=\"language-text\">&quot;title&quot;</code> 문자열 상수도 있다.</p>\n<h2>메타프로그래밍 시작</h2>\n<ul>\n<li>메타프로그래밍 기반의 솔루션을 찾아보자</li>\n<li>객체를 데이터베이스 테이블에 매핑하는 ActiveRecord 라이브러리를 사용해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">movie <span class=\"token operator\">=</span> <span class=\"token constant\">Movie</span><span class=\"token punctuation\">.</span>create\nmovie<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Doctor Strangelove\"</span>\nmovie<span class=\"token punctuation\">.</span>title  <span class=\"token comment\"># => \"Doctor Strangelove\"</span></code></pre></div>\n<ul>\n<li>이전 코드는 Movie에서 레코드를 매핑하는 객체를 만든 뒤 Movie의 title을 호출하여 접근했다.</li>\n<li>테이블에 대한 이름도 필요했다.</li>\n<li>하지만 이번 코드에선 이런 과정이 소스코드에 전혀 없다.</li>\n<li>정의하지 않은 <code class=\"language-text\">title</code>, <code class=\"language-text\">title=</code> 이 어떻게 존재하는 것일까?</li>\n</ul>\n<h3>ActiveRecord의 기본 작동 방식</h3>\n<ul>\n<li>\n<p>테이블 이름은 간단하게 클래스의 <code class=\"language-text\">introspection</code> 을 통해서 규칙을 정한다.</p>\n<ul>\n<li>클래스의 이름이 <code class=\"language-text\">Movie</code>이므로 <code class=\"language-text\">ActiveRecord</code>는 이를 <code class=\"language-text\">Movie</code>라는 테이블에 매핑한다</li>\n</ul>\n</li>\n<li>\n<p>그렇다면 객체의 속성에 접근하는 <code class=\"language-text\">title=</code> , <code class=\"language-text\">title</code> 같은 메서드는?? - <strong>여기서 메타 프로그래밍!</strong></p>\n<ul>\n<li>데이터베이스 스키마에서 이름을 유추하고 자동으로 정의한다.</li>\n<li>런타임에 스키마를 읽고 <code class=\"language-text\">Movie</code>테이블에 <code class=\"language-text\">title</code>, <code class=\"language-text\">director</code>라는 두 개의 컬럼을 발견</li>\n<li>동일한 이름의 두 속성에 대한 접근자 메소드를 정의한다.</li>\n</ul>\n</li>\n</ul>\n<h4>이게 바로 introspection의 음 양!! 단순히 언어의 구조를 읽는 것이 아니라 쓰기까지 하는 것</h4>\n<ul>\n<li>메타 프로그래밍은 런타임에 언어 구조를 조작하는 코드를 작성하는 것이다</li>\n<li>ActiveRecord는 이 컨셉을 적용했다.</li>\n<li>각 클래스의 특성에 대한 접근자 메소드를 작성하는 대신</li>\n<li>상속받는 클래스에 대해 런타임에 이런 메소드를 정의하는 코드를 작성했다.</li>\n</ul>\n<h2>메타프로그래밍과 루비</h2>\n<p>맨 처음 유령 마을과 시끌시끌한 시장에 대해 얘기했던 게 기억나는가?</p>\n<p>언어의 구문을 조작하려면 해당 구문이 런타임에 있어야한다.</p>\n<p>몇 가지 언어들은 런타임에서 제어기능을 제공하는데 이에대해 간략히 살펴보자.</p>\n<blockquote>\n<p>Code Generators and Compilers</p>\n<p>메타프로그래밍에서는 코드를 작성하는 코드를 작성한다. 하지만 그게 code generator와 컴파일러가 해주는 것 아닌가?</p>\n<p>예를들어 Java code를 작성하고 코드 제너레이터로 XML 설정 파일을 만들 수 있다.\n넓은 의미에서 이 XML 생성은 메타프로그래밍의 한 예이다.</p>\n<p>메타프로그래밍의 또 다른 의미로, 프로그램을 사용하여 두 번째 고유 프로그램을 생성하거나 조작한 다음 두 번째 프로그램을 실행한다는 것도 있다!\n( C++의 템플릿 )</p>\n<p>하지만 이 책에서는 메타프로그래밍의 다른 의미, 런타임에 스스로 조작하는 코드에 초점을 맞춘다.\nCode Generator 및 Compiler의 정적 메타 프로그래밍과 구별되는 동적 메타 프로그래밍이라고 생각하면 된다.</p>\n<p>또한 많은 언어에서 동적 메타프로그래밍을 할 수 있지만 루비에서는 더 우아하고 원활하게 할 수 있다!</p>\n</blockquote>\n<ul>\n<li>C로 작성된 프로그램은 런타임에 대부분의 정보가 손실되기 때문에 메타프로그래밍이나 Introspection을 지원하지 않는다.</li>\n<li>C++에서 몇몇 언어들의 구문들은 컴파일에서 살아남기 때문에 객체와 클래스에서 사용이 가능</li>\n<li>Java에서 컴파일과 런타임은 더 모호하다. 클래스 메서드를 나열하거나 슈퍼클래스까지 올라갈 수 있는 충분한 Introspection을 제공!</li>\n</ul>\n<p><strong>루비는 매우 메타프로그래밍 친화적인 언어다. 컴파일 타임이 없으며 대부분의 언어 문법을 런타임에 사용 가능하다.</strong></p>\n<p><strong>작성하는 코드와 런타임의 경계가 없다.</strong></p>\n<p><strong>루비의 메타프로그래밍은 그저 전문가를 위한 모호한 예술이 아니고, ActiveRecord처럼 정교한 것을 만드는 데만 유용한 기능도 아니다</strong></p>\n<p><strong>만약 고급 루비 코딩의 길을 가고싶다면 .... !</strong></p>\n<h2>사견</h2>\n<ul>\n<li>아직까진 쉬운 내용</li>\n<li>다른 orm들도 메타프로그래밍을 쓰는 것으로 알고 있다.</li>\n</ul>","frontmatter":{"title":"M Ruby - 1","date":"April 01, 2021","update":"April 01, 2021","tags":["ruby"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-1/","readingTime":{"minutes":4.72}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/4-pgconnectbad/"},"frontmatter":{"title":"PG:ConnectionBad - could not connect to server: Connection refused"}},"next":{"fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},"pageContext":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","series":"Metaprogramming Ruby","previousPostId":"ae390cb5-0f32-5525-9ffc-204ebb1321a2","nextPostId":"3ab153c7-ef8e-5540-a0ec-ee7551892012"}},"staticQueryHashes":[]}