{"componentChunkName":"component---src-templates-post-jsx","path":"/metaprogramming-ruby-9/","result":{"data":{"site":{"siteMetadata":{"title":"Seongjun Kim Blog"}},"markdownRemark":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","excerpt":"ActiveRecord는 루비의 객체를 데이터베이스 레코드에 매칭하는 Rails 라이브러리이다. 이러한 기능을 object relational mapping이라고 하고, 관계형 데이터베이스와 객체지향 프로그래밍을 모두 잘 활용 가능하다. 액티브 레코드가 하는 일 보다는 어떻게 하는지에 대해 관심있게 확인! 짧은 예시  는 데이터베이스 연결같은 클래스 메서…","html":"<ul>\n<li>ActiveRecord는 루비의 객체를 데이터베이스 레코드에 매칭하는 Rails 라이브러리이다.</li>\n<li>이러한 기능을 object relational mapping이라고 하고, 관계형 데이터베이스와 객체지향 프로그래밍을 모두 잘 활용 가능하다.</li>\n<li>액티브 레코드가 하는 일 보다는 어떻게 하는지에 대해 관심있게 확인!</li>\n</ul>\n<h2>짧은 예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'active_record'</span>\n<span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span><span class=\"token punctuation\">.</span>establish_connection <span class=\"token symbol\">:adapter</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"sqlite3\"</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token symbol\">:database</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"dbfile\"</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  validate <span class=\"token keyword\">do</span>\n    errors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token symbol\">:base</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Illegal duck name.\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unless</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ActiveRecord::Base</code> 는 데이터베이스 연결같은 클래스 메서드 뿐만 아니라 매핑되는 모든 클래스의 슈퍼 클래스이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  validate <span class=\"token keyword\">do</span>\n    errors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token symbol\">:base</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Illegal duck name.\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unless</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>\n<p>유효성 검사를 하는 클래스 매크로이다.</p>\n<ul>\n<li>Duck의 이름은 D로 시작해야한다!</li>\n<li>만약 다른 이름을 저장하려 하면 예외</li>\n</ul>\n</li>\n<li>\n<p>convention에 따라서 Duck은 ducks 테이블애 매핑된다.</p>\n<ul>\n<li>ActiveRecord는 데이터베이스 스키마를 봐서 ducks에 name이 있다는 것을 알고, 그 필드에 접근 가능한 Ghost Method를 정의한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">my_duck <span class=\"token operator\">=</span> <span class=\"token constant\">Duck</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nmy_duck<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Donald\"</span>\nmy_duck<span class=\"token punctuation\">.</span>valid<span class=\"token operator\">?</span>         <span class=\"token comment\"># => true</span>\nmy_duck<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n\nduck_from_database <span class=\"token operator\">=</span> <span class=\"token constant\">Duck</span><span class=\"token punctuation\">.</span>first\nduck_from_database<span class=\"token punctuation\">.</span>name         <span class=\"token comment\"># => \"Donald\"</span>\nduck_from_database<span class=\"token punctuation\">.</span>delete</code></pre></div>\n<h2>ActiveRecord의 매커니즘</h2>\n<ul>\n<li>앞의 예는 간단하지만 사실 더 많은 것들을 할 수 있다.</li>\n<li>하지만 ActiveRecord::Base 에서는 그런 메서드들에 대한 추적이 없다.</li>\n<li>따라서 초보자에겐 어떤 메서드가 어디서왔고 어떻게 들어오는지 이해하기 어렵다</li>\n</ul>\n<h3>Autoloading 매커니즘</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'active_support'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'active_model'</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">extend</span> <span class=\"token constant\">ActiveSupport</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Autoload</span>\n  autoload <span class=\"token symbol\">:Base</span>\n  autoload <span class=\"token symbol\">:NoTouching</span>\n  autoload <span class=\"token symbol\">:Persistence</span>\n  autoload <span class=\"token symbol\">:QueryCache</span>\n  autoload <span class=\"token symbol\">:Querying</span>\n  autoload <span class=\"token symbol\">:Validations</span>\n  <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li>\n<p>ActiveRecord는 두 개의 라이브러리에 크게 의존한다.</p>\n<ul>\n<li>ActiveSupport, ActiveModel</li>\n</ul>\n</li>\n<li><code class=\"language-text\">autoload</code> 는 ActiveSupport의 메서드임</li>\n<li><code class=\"language-text\">ActiveSupport::Autoload</code> 를 extend 하고 autoload는 ActiveRecord의 클래스 메서드가 된다.</li>\n<li>ActiveRecord는 autoload 클래스 매크로를 통해 수십개의 모듈을 등록한다.</li>\n</ul>\n<h3>ActiveRecord::Base</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">ActiveModel</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Naming</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">ActiveSupport</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Benchmarkable</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">ActiveSupport</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DescendantsTracker</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">ConnectionHandling</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">QueryCache</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">Querying</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">Translation</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">DynamicMatchers</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">Explain</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">Enum</span>\n    <span class=\"token keyword\">extend</span> <span class=\"token constant\">Delegation</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DelegateCache</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Core</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Persistence</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">NoTouching</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">ReadonlyAttributes</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">ModelSchema</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Inheritance</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Scoping</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Sanitization</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">AttributeAssignment</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">ActiveModel</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Conversion</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Integration</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Validations</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">CounterCache</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Locking</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Optimistic</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Locking</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Pessimistic</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">AttributeMethods</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Callbacks</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Timestamp</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Associations</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">ActiveModel</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SecurePassword</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">AutosaveAssociation</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">NestedAttributes</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Aggregations</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Transactions</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Reflection</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Serialization</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Store</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">Core</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token constant\">ActiveSupport</span><span class=\"token punctuation\">.</span>run_load_hooks<span class=\"token punctuation\">(</span><span class=\"token symbol\">:active_record</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Base</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li>모듈을 통해 기능들을 조립하는 클래스는 흔하지 않지만 ActiveRecord::Base는 이 작업을 대규모로 수행한다.</li>\n<li>그냥 수십 개의 모듈을 확장하거나 포함할 뿐이다.</li>\n<li><code class=\"language-text\">run_load_hooks</code> 코드를 통해 이러한 모듈 일부가 로드된 후 자체 configuration코드를 실행 가능</li>\n<li>모듈의 소스코드가 필요하지 않고 그냥 Include를 한다, 이 덕분에 최소한의 코드로 많은 모듈을 사용 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Persistence</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">save</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">save</span></span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">delete</span></span>   <span class=\"token comment\"># ...</span></code></pre></div>\n<ul>\n<li>Base의 특정 메서드가 어디서 왔는지 그리 어렵지 않을 수 있다</li>\n<li>저장과 같은 persistence 메서드는 위와 같은 코드에서 확인이 가능하다.</li>\n</ul>\n<h3>유효성 검증 모듈</h3>\n<p><code class=\"language-text\">ActiveRecord::Validations</code> - 관련 모듈인가...?</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">ActiveRecord</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Validations</span>\n    <span class=\"token keyword\">include</span> <span class=\"token constant\">ActiveModel</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Validations</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">valid</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></code></pre></div>\n<ul>\n<li>하지만 실제로 validate 메서드는 없음</li>\n<li><code class=\"language-text\">ActiveModel::validations</code> 에 있다~</li>\n</ul>\n<p>이런 모듈을 포함하여 조금 헷갈리는 세부사항이 있다.</p>\n<p>일반적으로 클래스는 모듈을 포함함으로써 인스턴스 메서드를 얻는다.</p>\n<p>하지만 validate는 ActiveRecord의 클래스 메서드이다. 어떻게 Base는 클래스 메서드를 얻을 수 있지?</p>\n<p>ActiveModel, ActiveRecord는 왜 두 모듈로 나뉘었나?</p>\n<p>크게 두 가지 작업</p>\n<ol>\n<li>저장 및 로드와 같은 데이터베이스 작업을 처리</li>\n<li>객체 모델을 다루는 것, 객체 속성을 관리하거나 유효한지 추적하는 것</li>\n</ol>\n<p>라이브러리의 저자들은 두개의 분리된 라이브러리로 분할하기로 결정해서 active_model이 탄생한 것</p>\n<p>특히 <code class=\"language-text\">valid?</code> 는 나름 데이터베이스쪽에 관계가 있어서 남았고,</p>\n<p><code class=\"language-text\">validate</code> 는 데이터베이스와 관계 없이 객체의 속성에만 관심이 있으므로 ActiveModel로 갔다</p>\n<h2>교훈</h2>\n<ul>\n<li>수많은 모듈을 포함해서 굉장히 큰 클래스가 된다.</li>\n<li>Base는 300개 이상의 인스턴스 메서드와 550개 이상의 클래스 메서드를 갖고있다..</li>\n<li>ActiveRecord::Base는 궁극의 오픈클래스</li>\n</ul>\n<p>수백개의 메서드를 가진 거대한 클래스? 이해하기 힘들고 어렵지 않나?</p>\n<ul>\n<li>액티브 레코드의 대부분의 메서드는 궁극적으로 하나의 클래스 안으로 굴러들어간다.</li>\n<li>일부 모듈은 메타프로그래밍을 사용하여 더 많은 메서드를 정의하는 것을 고민하지 않고..</li>\n<li>엎친 데 덮친 격으로 액티브 레코드로 작업하는 추가 라이브러리도 액티브 레코드를 확장함..</li>\n</ul>\n<p>스파게티 덩어리가 되지 않을까? <del>하지만 그렇지 않다...?</del> -</p>\n<ul>\n<li>많은 사람들이 자신의 목적을 위해 액티브 레코드를 몽키패치하고,..</li>\n<li>엑레의 소스코드는 빠르게 진화한다...</li>\n<li>안정적이게 유지가 되고 프로덕션에서 만족하며 사용중...</li>\n</ul>\n<p>액티브 레코드에서 배운 중요한 가이드라인...</p>\n<ul>\n<li>design techniques는... 상대적이고 사용하는 언어에 따라 다르다,</li>\n<li>루비에서는 다른 언어들과 다른 관용구를 사용한다.</li>\n<li>오래된 좋은 규칙들이 갑자기 쓸모없어지는 것이 아니다,</li>\n<li>루비에서도 다른 언어와 마찬가지로 디자인의 기본 원칙( 디커플링, simplicity, 중복 없음)이 적용된다.</li>\n<li>하지만 이를 달성하기 위한 기술이 매우 다르다.</li>\n<li>ActiveRecord::Base를 보면 매우 큰 클래스지만 소스코드에는 복잡한 코드가 없다</li>\n<li>대신 느슨하게 결합되고 테스트하기 쉬우며 재사용하기 쉬운 모듈을 조합하여 런타임에 구성된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'active_model'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">ActiveModel</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Validations</span>\n  attr_accessor <span class=\"token symbol\">:password</span>\n  validate <span class=\"token keyword\">do</span>\n    errors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token symbol\">:base</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Don't let dad choose the password.\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> password <span class=\"token operator\">==</span> <span class=\"token string\">'1234'</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nuser <span class=\"token operator\">=</span> <span class=\"token constant\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span>\nuser<span class=\"token punctuation\">.</span>valid<span class=\"token operator\">?</span>        <span class=\"token comment\"># => true</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'1234'</span>\nuser<span class=\"token punctuation\">.</span>valid<span class=\"token operator\">?</span>        <span class=\"token comment\"># => false</span></code></pre></div>\n<ul>\n<li>위처럼 필요한 경우만 포함도 가능함</li>\n</ul>","frontmatter":{"title":"M Ruby - 9. The Design of Active Record","date":"May 10, 2021","update":"May 10, 2021","tags":["ruby","book"],"series":"Metaprogramming Ruby"},"fields":{"slug":"/metaprogramming-ruby-9/","readingTime":{"minutes":3.845}}},"seriesList":{"edges":[{"node":{"id":"34257cb7-20bf-52a1-a751-44435c07aa96","fields":{"slug":"/metaprogramming-ruby-1/"},"frontmatter":{"title":"M Ruby - 1"}}},{"node":{"id":"3ab153c7-ef8e-5540-a0ec-ee7551892012","fields":{"slug":"/metaprogramming-ruby-2/"},"frontmatter":{"title":"M Ruby - 2. The Object Model"}}},{"node":{"id":"ab0c5e49-f893-5aaf-8315-c183e6f9df3c","fields":{"slug":"/metaprogramming-ruby-3/"},"frontmatter":{"title":"M Ruby - 3. Methods"}}},{"node":{"id":"ba539d0b-e3b6-507e-90b2-12083666ad46","fields":{"slug":"/metaprogramming-ruby-4/"},"frontmatter":{"title":"M Ruby - 4. Blocks"}}},{"node":{"id":"10646ae4-ced4-5411-87f6-7011a8f5c108","fields":{"slug":"/metaprogramming-ruby-5/"},"frontmatter":{"title":"M Ruby - 5. Class Definitions"}}},{"node":{"id":"9d128593-da43-521b-832e-ff48a726844c","fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}}},{"node":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","fields":{"slug":"/metaprogramming-ruby-9/"},"frontmatter":{"title":"M Ruby - 9. The Design of Active Record"}}},{"node":{"id":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f","fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},{"node":{"id":"b76117b8-cdf6-5fdb-a207-d3bada809e8d","fields":{"slug":"/metaprogramming-ruby-11/"},"frontmatter":{"title":"M Ruby - 11.alias_method_chain의 흥망성쇠"}}},{"node":{"id":"6d902f10-0216-599c-8523-7c663a9a2027","fields":{"slug":"/metaprogramming-ruby-12/"},"frontmatter":{"title":"M Ruby - 12. Attribute Methods의 진화"}}}]},"previous":{"fields":{"slug":"/metaprogramming-ruby-6/"},"frontmatter":{"title":"M Ruby - 6. Code That Writes Code"}},"next":{"fields":{"slug":"/metaprogramming-ruby-10/"},"frontmatter":{"title":"M Ruby - 10. Active Support's Concern Module"}}},"pageContext":{"id":"02c9824b-fff1-5517-bcd6-eb7690b1fc5a","series":"Metaprogramming Ruby","previousPostId":"9d128593-da43-521b-832e-ff48a726844c","nextPostId":"a48856b7-f3f6-56ca-a8f2-bf55cd90c62f"}},"staticQueryHashes":[]}